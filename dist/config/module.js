define(["lodash","angular","app/core/core"],function(t,e,n){return function(t){var e={};function n(a){if(e[a])return e[a].exports;var r=e[a]={i:a,l:!1,exports:{}};return t[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(a,r,function(e){return t[e]}.bind(null,r));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}([function(e,n){e.exports=t},function(t,e,n){"use strict";function a(t){var e="default";for(var n in t)if("kentik-ds"===t[n].type)return"custom"===(e=t[n].jsonData.region)&&console.log("getRegion(): Custom Dynamic URL: "+t[n].jsonData.dynamicUrl),e;return e}n.d(e,"a",function(){return a})},function(t,e,n){"use strict";n.d(e,"a",function(){return i}),n.d(e,"b",function(){return o});var a=n(5),r=n(0);function i(t){var e="";e+=t.status?"("+t.status+") ":"",e+=t.statusText?t.statusText+": ":"",t.data&&t.data.error?e+=t.data.error:t.err?e+=t.err:r.isString(t)&&(e+=t),a.appEvents.emit("alert-error",["Can't connect to Kentik API",e])}function o(t,e,n){var i="";i+=e.status?"("+e.status+") ":"",i+=e.statusText?e.statusText+": ":"",e.data&&e.data.error?i+=e.data.error:e.err?i+=e.err:r.isString(e)&&(i+=e),a.appEvents.emit("alert-"+n,[t,i])}},function(t,n){t.exports=e},function(t,e,n){"use strict";n.d(e,"a",function(){return c});var a=n(3),r=n.n(a),i=n(1),o=function(t,e,n,a){return new(n||(n=Promise))(function(r,i){function o(t){try{c(a.next(t))}catch(t){i(t)}}function s(t){try{c(a.throw(t))}catch(t){i(t)}}function c(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(o,s)}c((a=a.apply(t,e||[])).next())})},s=function(t,e){var n,a,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&i[0]?a.return:i[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,i[1])).done)return r;switch(a=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,a=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(r=(r=o.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],a=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},c=function(){function t(t){var e=this;this.backendSrv=t,this.apiReady=!1,this.baseUrl="/api/plugin-proxy/kentik-app",t.get("/api/datasources").then(function(t){e.region=Object(i.a)(t),e.setRegion(e.region),e.apiReady=!0})}return t.$inject=["backendSrv"],t.prototype.setRegion=function(t){this.region=t},t.prototype.getDevices=function(){return o(this,void 0,void 0,function(){var t,e=this;return s(this,function(n){switch(n.label){case 0:return this.backendSrv.get("/api/datasources").then(function(t){e.region=Object(i.a)(t),e.setRegion(e.region),e.apiReady=!0}),[4,this._get("/api/v5/devices")];case 1:return(t=n.sent()).data&&t.data.devices?[2,t.data.devices]:[2,[]]}})})},t.prototype.getUsers=function(){return o(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/users")];case 1:return[2,t.sent()]}})})},t.prototype.getFieldValues=function(t){var e="SELECT DISTINCT "+t+" FROM all_devices ORDER BY "+t+" ASC";return this.invokeSQLQuery(e)},t.prototype.getCustomDimensions=function(){return o(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/customdimensions")];case 1:return[2,t.sent().data.customDimensions]}})})},t.prototype.getSavedFilters=function(){return o(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/saved-filters")];case 1:return[2,t.sent().data]}})})},t.prototype.invokeTopXDataQuery=function(t){var e={queries:[{query:t,bucketIndex:0}]};return this._post("/api/v5/query/topXdata",e)},t.prototype.invokeSQLQuery=function(t){var e={query:t};return this._post("/api/v5/query/sql",e)},t.prototype._get=function(t){return o(this,void 0,void 0,function(){var e=this;return s(this,function(n){switch(n.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(t){e.setRegion(Object(i.a)(t))})];case 1:n.sent(),n.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"GET",url:this.baseUrl+"/"+this.region+t}).catch(function(t){return console.error(t),t.err?Promise.reject(t.err):Promise.reject(t)})]}})})},t.prototype._post=function(t,e){return o(this,void 0,void 0,function(){var n=this;return s(this,function(a){switch(a.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(t){n.setRegion(Object(i.a)(t))})];case 1:a.sent(),a.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"POST",url:this.baseUrl+"/"+this.region+t,data:e}).then(function(t){return t.data?t.data:[]}).catch(function(t){return console.error(t),t.err?Promise.reject(t.err):Promise.reject(t)})]}})})},t}();r.a.module("grafana.services").service("kentikAPISrv",c)},function(t,e){t.exports=n},,function(t,e){t.exports='<h3 class="page-heading">Enter your Kentik Credentials</h3>\n<div class="gf-form-group">\n  <div class="gf-form" ng-if="ctrl.apiError && ctrl.appModel.enabled">\n    <i class="fa fa-exclamation-circle" style="color: #ca4333;">\n      <span>Invalid API credentials. This app wont work until the credentials are updated.</span>\n    </i>\n  </div>\n  <div class="gf-form">\n    <label class="gf-form-label width-10">Email</label>\n    \x3c!-- Hidden input to stop chrome from autofilling --\x3e\n    <input style="display:none;" type="text" name="somefakename" />\n    <input type="text" class="gf-form-input width-30 max-width-30" ng-model=\'ctrl.appModel.jsonData.email\' placeholder="email" />\n  </div>\n\n  <div class="gf-form">\n    <label class="gf-form-label width-10">Region\n      <tip>US and EU regions are available. Default is US. A custom url can also be specified.</tip>\n    </label>\n    <div class="gf-form-select-wrapper">\n      <select class="gf-form-input" ng-model="ctrl.appModel.jsonData.region" ng-options="f.value as f.text for f in ctrl.regionTypes"></select>\n    </div>\n  </div>\n\n    \x3c!-- custom endpoint should display the url --\x3e\n  <div ng-if="ctrl.appModel.jsonData.region === \'custom\'" class="gf-form">\n    <label class="gf-form-label width-10">Custom URL\n      <tip>Specify custom url</tip>\n    </label>\n    <div ng-if="ctrl.appModel.jsonData.region === \'custom\'">\n      <input type="text" class="gf-form-input width-30 max-width-30" ng-model=\'ctrl.appModel.jsonData.dynamicUrl\' placeholder="https://grafana-api.kentik.com/api/v5" />\n    </div>\n  </div>\n\n  <div class="gf-form-inline">\n    <div class="gf-form kentik-inline-field-margin--right">\n      <label class="gf-form-label width-10">Api Token</label>\n      \x3c!-- Hidden input to stop chrome from autofilling --\x3e\n      <input style="display:none;" type="password" name="anotherfakename" />\n      <input type="password" class="gf-form-input width-30 max-width-30" ng-model="ctrl.appModel.secureJsonData.token" ng-if="!ctrl.appModel.jsonData.tokenSet"\n        placeholder="api token" />\n      <div ng-if="ctrl.appModel.jsonData.tokenSet" class="gf-form">\n        <input type="text" class="gf-form-input max-width-20" disabled="disabled" value="saved" />\n        <div ng-if="ctrl.appModel.enabled">\n          <i class="fa fa-exclamation-triangle" ng-if="!ctrl.apiValidated" alt="Could not validate api Token."></i>\n        </div>\n      </div>\n    </div>\n    <div class="gf-form">\n      <a class="btn btn-danger btn-small" href="#" ng-click="ctrl.reset()" ng-if="ctrl.appModel.jsonData.tokenSet">reset</a>\n    </div>\n  </div>\n</div>\n\n<div ng-if="ctrl.appModel.jsonData.tokenSet" class="kentik-enabled-box">\n  <i class="icon-gf icon-gf-check icon-gf-check kentik-icon-success"></i> Successfully enabled. <strong>Next up:\n  </strong><a href="dashboard/db/kentik-home" class="external-link">Go to Kentik Home Dashboard</a>\n</div>\n'},function(t,e,n){"use strict";n.r(e),n.d(e,"ConfigCtrl",function(){return u});var a=n(7),r=n.n(a),i=n(4),o=n(2),s=n(0),c=function(t,e,n,a){return new(n||(n=Promise))(function(r,i){function o(t){try{c(a.next(t))}catch(t){i(t)}}function s(t){try{c(a.throw(t))}catch(t){i(t)}}function c(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(o,s)}c((a=a.apply(t,e||[])).next())})},l=function(t,e){var n,a,r,i,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&i[0]?a.return:i[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,i[1])).done)return r;switch(a=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,a=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(r=(r=o.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],a=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},u=function(){function t(t,e,n){this.backendSrv=n,this.regionTypes=[{value:"default",text:"US (default)"},{value:"eu",text:"EU"},{value:"custom",text:"Custom"}],this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this)),this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this)),this.appModel.jsonData||(this.appModel.jsonData={}),this.appModel.secureJsonData||(this.appModel.secureJsonData={}),void 0===this.appModel.jsonData.region&&(this.appModel.jsonData.region="default"),this.apiValidated=!1,this.apiError=!1,this.kentik=new i.a(this.backendSrv),this.kentik.setRegion(this.appModel.jsonData.region),this.appModel.enabled&&this.appModel.jsonData.tokenSet&&this.validateApiConnection()}return t.$inject=["$scope","$injector","backendSrv"],t.prototype.preUpdate=function(){return this.appModel.secureJsonData.token&&(this.appModel.jsonData.tokenSet=!0),this.initDatasource()},t.prototype.postUpdate=function(){return c(this,void 0,void 0,function(){return l(this,function(t){switch(t.label){case 0:return this.appModel.enabled?[4,this.validateApiConnection()]:[2,Promise.resolve()];case 1:return t.sent(),[4,this.appEditCtrl.importDashboards()];case 2:return t.sent(),[2,{url:"dashboard/db/kentik-home",message:"Kentik Connect Pro app installed!"}]}})})},t.prototype.validateApiConnection=function(){return c(this,void 0,void 0,function(){var t,e;return l(this,function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,this.kentik.getUsers()];case 1:t=n.sent();try{t.hasOwnProperty("data")&&(this.apiValidated=!0,Object(o.b)("API working!","","success"))}catch(t){Object(o.a)("Unexpected result from API: "+t),this.apiValidated=!1,this.apiError=!0}return[3,3];case 2:return e=n.sent(),Object(o.a)(e),this.apiValidated=!1,this.apiError=!0,[3,3];case 3:return[2]}})})},t.prototype.reset=function(){this.appModel.jsonData.email="",this.appModel.jsonData.tokenSet=!1,this.appModel.jsonData.region="default",this.appModel.jsonData.dynamicUrl="",this.appModel.secureJsonData={},this.apiValidated=!1},t.prototype.initDatasource=function(){var t=this,e=this;return e.backendSrv.get("/api/datasources").then(function(n){var a=!1,r=!1,i=NaN;s.forEach(n,function(e){if("kentik-ds"===e.type)return a=!0,i=e.id,r=!0,e.jsonData.region!==t.appModel.jsonData.region&&(r=!0),void(e.jsonData!==t.appModel.jsonData&&(r=!0))});var o=[];if(!a||r){var c={name:"kentik",type:"kentik-ds",access:"proxy",jsonData:e.appModel.jsonData};r?o.push(e.backendSrv.put("/api/datasources/"+i,c)):o.push(e.backendSrv.post("/api/datasources",c))}return Promise.all(o)})},t}();u.template=r.a}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,