define(["lodash","angular","app/core/core"],function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}([function(e,n){e.exports=t},function(t,e,n){"use strict";function r(t){var e="default";for(var n in t)if("kentik-ds"===t[n].type)return e=t[n].jsonData.region;return e}n.d(e,"a",function(){return r})},function(t,n){t.exports=e},function(t,e,n){"use strict";n.d(e,"a",function(){return i}),n.d(e,"b",function(){return o});var r=n(5),a=n(0);function i(t){var e="";e+=t.status?"("+t.status+") ":"",e+=t.statusText?t.statusText+": ":"",t.data&&t.data.error?e+=t.data.error:t.err?e+=t.err:a.isString(t)&&(e+=t),r.appEvents.emit("alert-error",["Can't connect to Kentik API",e])}function o(t,e,n){var i="";i+=e.status?"("+e.status+") ":"",i+=e.statusText?e.statusText+": ":"",e.data&&e.data.error?i+=e.data.error:e.err?i+=e.err:a.isString(e)&&(i+=e),r.appEvents.emit("alert-"+n,[t,i])}},function(t,e,n){"use strict";n.d(e,"a",function(){return c});var r=n(2),a=n.n(r),i=n(1),o=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}c((r=r.apply(t,e||[])).next())})},s=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},c=function(){function t(t){var e=this;this.backendSrv=t,this.apiReady=!1,this.baseUrl="/api/plugin-proxy/kentik-app",t.get("/api/datasources").then(function(t){e.region=Object(i.a)(t),e.setRegion(e.region),e.apiReady=!0})}return t.$inject=["backendSrv"],t.prototype.setRegion=function(t){this.region=t},t.prototype.getDevices=function(){return o(this,void 0,void 0,function(){var t,e=this;return s(this,function(n){switch(n.label){case 0:return this.backendSrv.get("/api/datasources").then(function(t){e.region=Object(i.a)(t),e.setRegion(e.region),e.apiReady=!0}),[4,this._get("/api/v5/devices")];case 1:return(t=n.sent()).data&&t.data.devices?[2,t.data.devices]:[2,[]]}})})},t.prototype.getUsers=function(){return this._get("/api/v5/users")},t.prototype.getFieldValues=function(t){var e="SELECT DISTINCT "+t+" FROM all_devices ORDER BY "+t+" ASC";return this.invokeSQLQuery(e)},t.prototype.getCustomDimensions=function(){return o(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/customdimensions")];case 1:return[2,t.sent().data.customDimensions]}})})},t.prototype.getSavedFilters=function(){return o(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/saved-filters")];case 1:return[2,t.sent().data]}})})},t.prototype.invokeTopXDataQuery=function(t){var e={queries:[{query:t,bucketIndex:0}]};return this._post("/api/v5/query/topXdata",e)},t.prototype.invokeSQLQuery=function(t){var e={query:t};return this._post("/api/v5/query/sql",e)},t.prototype._get=function(t){return o(this,void 0,void 0,function(){var e=this;return s(this,function(n){switch(n.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(t){e.setRegion(Object(i.a)(t))})];case 1:n.sent(),n.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"GET",url:this.baseUrl+"/"+this.region+t}).catch(function(t){return console.error(t),t.err?Promise.reject(t.err):Promise.reject(t)})]}})})},t.prototype._post=function(t,e){return o(this,void 0,void 0,function(){var n=this;return s(this,function(r){switch(r.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(t){n.setRegion(Object(i.a)(t))})];case 1:r.sent(),r.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"POST",url:this.baseUrl+"/"+this.region+t,data:e}).then(function(t){return t.data?t.data:[]}).catch(function(t){return console.error(t),t.err?Promise.reject(t.err):Promise.reject(t)})]}})})},t}();a.a.module("grafana.services").service("kentikAPISrv",c)},function(t,e){t.exports=n},,function(t,e){t.exports='<h3 class="page-heading">Enter your Kentik Credentials</h3>\n<div class="gf-form-group">\n  <div class="gf-form" ng-if="ctrl.apiError && ctrl.appModel.enabled">\n    <i class="fa fa-exclamation-circle" style="color: #ca4333;">\n      <span>Invalid API credentials. This app wont work until the credentials are updated.</span>\n    </i>\n  </div>\n  <div class="gf-form">\n    <label class="gf-form-label width-10">Email</label>\n    \x3c!-- Hidden input to stop chrome from autofilling --\x3e\n    <input style="display:none;" type="text" name="somefakename" />\n    <input type="text" class="gf-form-input max-width-20" ng-model=\'ctrl.appModel.jsonData.email\' placeholder="email" />\n  </div>\n\n  <div class="gf-form">\n    <label class="gf-form-label width-10">Region\n      <tip>US and EU regions are available. Default is US</tip>\n    </label>\n    <div class="gf-form-select-wrapper">\n      <select class="gf-form-input" ng-model="ctrl.appModel.jsonData.region" ng-options="f.value as f.text for f in ctrl.regionTypes"></select>\n    </div>\n  </div>\n\n  <div class="gf-form-inline">\n    <div class="gf-form kentik-inline-field-margin--right">\n      <label class="gf-form-label width-10">Api Token</label>\n      \x3c!-- Hidden input to stop chrome from autofilling --\x3e\n      <input style="display:none;" type="password" name="anotherfakename" />\n      <input type="password" class="gf-form-input max-width-20" ng-model="ctrl.appModel.secureJsonData.token" ng-if="!ctrl.appModel.jsonData.tokenSet"\n        placeholder="api token" />\n      <div ng-if="ctrl.appModel.jsonData.tokenSet" class="gf-form">\n        <input type="text" class="gf-form-input max-width-20" disabled="disabled" value="saved" />\n        <div ng-if="ctrl.appModel.enabled">\n          <i class="fa fa-exclamation-triangle" ng-if="!ctrl.apiValidated" alt="Could not validate api Token."></i>\n        </div>\n      </div>\n    </div>\n    <div class="gf-form">\n      <a class="btn btn-danger btn-small" href="#" ng-click="ctrl.reset()" ng-if="ctrl.appModel.jsonData.tokenSet">reset</a>\n    </div>\n  </div>\n</div>\n\n<div ng-if="ctrl.appModel.jsonData.tokenSet" class="kentik-enabled-box">\n  <i class="icon-gf icon-gf-check icon-gf-check kentik-icon-success"></i> Successfully enabled. <strong>Next up:\n  </strong><a href="dashboard/db/kentik-home" class="external-link">Go to Kentik Home Dashboard</a>\n</div>\n'},function(t,e,n){"use strict";n.r(e),n.d(e,"ConfigCtrl",function(){return l});var r=n(7),a=n.n(r),i=n(4),o=n(3),s=n(0),c=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}c((r=r.apply(t,e||[])).next())})},u=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},l=function(){function t(t,e,n){this.backendSrv=n,this.regionTypes=[{value:"default",text:"US (default)"},{value:"eu",text:"EU"}],this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this)),this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this)),this.appModel.jsonData||(this.appModel.jsonData={}),this.appModel.secureJsonData||(this.appModel.secureJsonData={}),void 0===this.appModel.jsonData.region&&(this.appModel.jsonData.region="default"),this.apiValidated=!1,this.apiError=!1,this.kentik=new i.a(this.backendSrv),this.kentik.setRegion(this.appModel.jsonData.region),this.appModel.enabled&&this.appModel.jsonData.tokenSet&&this.validateApiConnection()}return t.$inject=["$scope","$injector","backendSrv"],t.prototype.preUpdate=function(){return this.appModel.secureJsonData.token&&(this.appModel.jsonData.tokenSet=!0),this.initDatasource()},t.prototype.postUpdate=function(){return c(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return this.appModel.enabled?[4,this.validateApiConnection()]:[2,Promise.resolve()];case 1:return t.sent(),[4,this.appEditCtrl.importDashboards()];case 2:return t.sent(),[2,{url:"dashboard/db/kentik-home",message:"Kentik Connect Pro app installed!"}]}})})},t.prototype.validateApiConnection=function(){return c(this,void 0,void 0,function(){var t;return u(this,function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,this.kentik.getUsers()];case 1:return e.sent(),this.apiValidated=!0,[3,3];case 2:return t=e.sent(),Object(o.a)(t),this.apiValidated=!1,this.apiError=!0,[3,3];case 3:return[2]}})})},t.prototype.reset=function(){this.appModel.jsonData.email="",this.appModel.jsonData.tokenSet=!1,this.appModel.jsonData.region="default",this.appModel.secureJsonData={},this.apiValidated=!1},t.prototype.initDatasource=function(){var t=this,e=this;return e.backendSrv.get("/api/datasources").then(function(n){var r=!1,a=!1,i=NaN;s.forEach(n,function(e){if("kentik-ds"===e.type)return r=!0,i=e.id,void(e.jsonData.region!==t.appModel.jsonData.region&&(a=!0))});var o=[];if(!r||a){var c={name:"kentik",type:"kentik-ds",access:"proxy",jsonData:e.appModel.jsonData};a?o.push(e.backendSrv.put("/api/datasources/"+i,c)):o.push(e.backendSrv.post("/api/datasources",c))}return Promise.all(o)})},t}();l.template=a.a}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,