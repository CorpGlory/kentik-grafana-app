{"version":3,"sources":["../../../src/config/config.js"],"names":["KentikConfigCtrl","$scope","$injector","backendSrv","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","appModel","jsonData","secureJsonData","apiValidated","apiError","enabled","tokenSet","validateApiConnection","token","initDatasource","Promise","resolve","self","then","importDashboards","url","message","promise","get","email","results","foundKentic","forEach","ds","name","promises","kentik","type","access","push","post","all","template","ConfigCtrl"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass KentikConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.backendSrv = backendSrv;\n\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n\n    if (!this.appModel.jsonData) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    this.apiValidated = false;\n    this.apiError = false;\n    if (this.appModel.enabled && this.appModel.jsonData.tokenSet) {\n      this.validateApiConnection();\n    }\n  }\n\n  preUpdate() {\n    if (this.appModel.secureJsonData.token)  {\n      this.appModel.jsonData.tokenSet = true;\n    }\n\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n    var self = this;\n    return this.validateApiConnection().then(() => {\n      return self.appEditCtrl.importDashboards().then(() => {\n        return {\n          url: \"dashboard/db/kentik-home\",\n          message: \"Kentik Connect Pro app installed!\"\n        };\n      });\n    });\n  }\n\n  // make sure that we can hit the Kentik API.\n  validateApiConnection() {\n    var promise = this.backendSrv.get('/api/plugin-proxy/kentik-app/api/v5/users');\n    promise.then(() => {\n      this.apiValidated = true;\n    }, () => {\n      this.apiValidated = false;\n      this.apiError = true;\n    });\n    return promise;\n  }\n\n  reset() {\n    this.appModel.jsonData.email = '';\n    this.appModel.jsonData.tokenSet = false;\n    this.appModel.secureJsonData = {};\n    this.apiValidated = false;\n  }\n\n  initDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources').then(function(results) {\n      var foundKentic = false;\n      _.forEach(results, function(ds) {\n        if (foundKentic) { return; }\n        if (ds.name === \"kentik\") {\n          foundKentic = true;\n        }\n      });\n      var promises = [];\n      if (!foundKentic) {\n        // create datasource.\n        var kentik = {\n          name: 'kentik',\n          type: 'kentik-ds',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('/api/datasources', kentik));\n      }\n      return Promise.all(promises);\n    });\n  }\n}\n\nKentikConfigCtrl.template = configTemplate;\n\nexport {\n  KentikConfigCtrl as ConfigCtrl\n};\n\n"]}