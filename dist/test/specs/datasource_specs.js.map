{"version":3,"sources":["../../../specs/datasource_specs.js"],"names":["describe","ctx","defined","match","beforeEach","$q","kentikProxySrv","templateSrv","instanceSettings","ds","it","done","filters","key","operator","value","expectedGroup","filterField","filterValue","connector","not","filterGroup","convertToKentikFilterGroup","expect","to","eql"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,kBAAT,EAA6B,YAAM;AACjC,MAAIC,MAAM,EAAV;AACA,MAAIC,UAAU,gBAAMC,KAAN,CAAYD,OAA1B;;AAEAE,aAAW,YAAY;AACrBH,QAAII,EAAJ;AACAJ,QAAIK,cAAJ,GAAqB,EAArB;AACAL,QAAIM,WAAJ,GAAkB,EAAlB;;AAEA,QAAIC,mBAAmB,EAAvB;AACAP,QAAIQ,EAAJ,GAAS,uBAAeD,gBAAf,EAAiC,EAAjC,EAAqCP,IAAIM,WAAzC,CAAT;AACD,GAPD;;AASAP,WAAS,mCAAT,EAA8C,YAAM;AAClDU,OAAG,6BAAH,EAAkC,UAACC,IAAD,EAAU;AAC1C,UAAIC,UAAU,CACZ,EAAEC,KAAK,gBAAP,EAAyBC,UAAU,GAAnC,EAAwCC,OAAO,IAA/C,EADY,CAAd;;AAIA,UAAIC,gBAAgB,CAAC;AACnBJ,iBAAS,CACP,EAAEK,aAAa,SAAf,EAA0BH,UAAU,GAApC,EAAyCI,aAAa,IAAtD,EADO,CADU;AAInBC,mBAAW,KAJQ;AAKnBC,aAAK;AALc,OAAD,CAApB;;AAQA,UAAIC,cAAcpB,IAAIQ,EAAJ,CAAOa,0BAAP,CAAkCV,OAAlC,CAAlB;AACAW,aAAOF,WAAP,EAAoBG,EAApB,CAAuBC,GAAvB,CAA2BT,aAA3B;AACAL;AACD,KAhBD;AAiBD,GAlBD;AAoBD,CAjCD","file":"datasource_specs.js","sourcesContent":["import { Datasource } from \"../datasource/module\";\nimport Q from \"q\";\nimport sinon from 'sinon';\n\ndescribe('KentikDatasource', () => {\n  let ctx = {};\n  let defined = sinon.match.defined;\n\n  beforeEach(function () {\n    ctx.$q = Q;\n    ctx.kentikProxySrv = {};\n    ctx.templateSrv = {};\n\n    let instanceSettings = {};\n    ctx.ds = new Datasource(instanceSettings, {}, ctx.templateSrv);\n  });\n\n  describe('When building Kentik filter group', () => {\n    it('should build proper filters', (done) => {\n      let filters = [\n        { key: \"Source Country\", operator: \"=\", value: \"US\" }\n      ];\n\n      let expectedGroup = [{\n        filters: [\n          { filterField: \"src_geo\", operator: \"=\", filterValue: \"US\" }\n        ],\n        connector: \"All\",\n        not: false\n      }];\n\n      let filterGroup = ctx.ds.convertToKentikFilterGroup(filters);\n      expect(filterGroup).to.eql(expectedGroup);\n      done();\n    });\n  });\n\n});\n"]}