{"version":3,"sources":["../../../src/datasource/kentikAPI.js"],"names":["KentikAPI","backendSrv","baseUrl","_get","then","response","data","devices","options","unitDef","find","value","unit","query","metric","starting_time","range","from","utc","format","ending_time","to","deviceNames","field","formatAggs","formatFilters","kentikFilterGroups","aggs","filters_obj","length","invokeSQLQuery","kentik_v5_query","_post","url","datasourceRequest","method","module","service"],"mappings":"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","file":"kentikAPI.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {unitList} from './metric_def';\n\nclass KentikAPI {\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n    this.baseUrl = 'api/plugin-proxy/kentik-app';\n  }\n\n  getDevices() {\n    return this._get('/api/v5/devices')\n    .then(response => {\n      if (response.data && response.data.devices) {\n        return response.data.devices;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  formatQuery(options) {\n    let unitDef = _.find(unitList, {value: options.unit});\n    let query = {\n      \"dimension\": [\n        options.metric\n      ],\n      \"metric\": options.unit,\n      \"matrixBy\": [],\n      \"cidr\": 32,\n      \"cidr6\": 128,\n      \"topx\": 8, // Visualization depth (8 by default)\n      \"depth\": 100,\n      \"fastData\": \"Auto\",\n      \"lookback_seconds\": 0,\n      \"time_format\": \"UTC\",\n      starting_time: options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n      ending_time: options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n      \"device_name\": options.deviceNames,\n      \"bucket\": \"\",\n      \"bucketIndex\": -1,\n      \"outsort\": unitDef.field,\n      \"aggregates\": this.formatAggs(unitDef),\n      \"filter_string\": \"\",\n      \"filters_obj\": this.formatFilters(options.kentikFilterGroups)\n    };\n\n    return query;\n  }\n\n  formatAggs(unitDef) {\n    let aggs = [];\n    if (unitDef.field === \"f_countdistinct_inet_src_addr\" ||\n        unitDef.field === \"f_countdistinct_inet_dst_addr\") {\n      aggs = [\n      {\n        \"name\": unitDef.field,\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_bits_per_sec\",\n        \"column\": \"f_sum_both_bytes\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_pkts_per_sec\",\n        \"column\": \"f_sum_both_pkts\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      }];\n    } else {\n      aggs = [\n      {\n        \"name\": unitDef.field, // avg_bits_per_sec\n        \"column\": unitDef.field,\n        \"fn\": \"average\",\n        \"properName\": \"Average\",\n        \"raw\": true, // Set to get timeseries data\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"properName\": \"95th Percentile\",\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"max_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      }];\n    }\n    return aggs;\n  }\n\n  formatFilters(kentikFilterGroups) {\n    let filters_obj = {};\n    if (kentikFilterGroups.length) {\n      filters_obj = {\n        \"connector\": \"All\",\n        \"custom\": false,\n        \"filterGroups\": kentikFilterGroups,\n        \"filterString\": \"\"\n      };\n    }\n\n    return filters_obj;\n  }\n\n  getFieldValues(field) {\n    let query = `SELECT DISTINCT ${field} FROM all_devices ORDER BY ${field} ASC`;\n    return this.invokeSQLQuery(query);\n  }\n\n  invokeQuery(query) {\n    let kentik_v5_query = {\n      \"queries\": [\n        {\n          \"query\": query,\n          \"bucketIndex\": 0,\n          \"isOverlay\": false\n        }\n      ]\n    };\n\n    return this._post('/api/v5/query/topXdata', kentik_v5_query);\n  }\n\n  invokeSQLQuery(query) {\n    let data = {\n      \"query\": query\n    };\n\n    return this._post('/api/v5/query/sql', data);\n  }\n\n  _get(url) {\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.baseUrl + url,\n    });\n  }\n\n  _post(url, data) {\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: this.baseUrl + url,\n      data: data\n    })\n    .then(response => {\n      if (response.data) {\n        return response.data;\n      } else {\n        return [];\n      }\n    });\n  }\n}\n\nangular\n  .module('grafana.services')\n  .service('kentikAPISrv', KentikAPI);\n"]}