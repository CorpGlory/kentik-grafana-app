define(["lodash","angular","app/core/core"],function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(e,n){e.exports=t},function(t,e,n){"use strict";function r(t){var e="default";for(var n in t)if("kentik-ds"===t[n].type)return"custom"===(e=t[n].jsonData.region)&&console.log("getRegion(): Custom Dynamic URL: "+t[n].jsonData.dynamicUrl),e;return e}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.d(e,"a",function(){return o}),n.d(e,"b",function(){return a});var r=n(5),i=n(0);function o(t){var e="";e+=t.status?"("+t.status+") ":"",e+=t.statusText?t.statusText+": ":"",t.data&&t.data.error?e+=t.data.error:t.err?e+=t.err:i.isString(t)&&(e+=t),r.appEvents.emit("alert-error",["Can't connect to Kentik API",e])}function a(t,e,n){var o="";o+=e.status?"("+e.status+") ":"",o+=e.statusText?e.statusText+": ":"",e.data&&e.data.error?o+=e.data.error:e.err?o+=e.err:i.isString(e)&&(o+=e),r.appEvents.emit("alert-"+n,[t,o])}},function(t,n){t.exports=e},function(t,e,n){"use strict";n.d(e,"a",function(){return u});var r=n(3),i=n.n(r),o=n(1),a=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(a,s)}u((r=r.apply(t,e||[])).next())})},s=function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},u=function(){function t(t){var e=this;this.backendSrv=t,this.apiReady=!1,this.baseUrl="/api/plugin-proxy/kentik-app",t.get("/api/datasources").then(function(t){e.region=Object(o.a)(t),e.setRegion(e.region),e.apiReady=!0})}return t.$inject=["backendSrv"],t.prototype.setRegion=function(t){this.region=t},t.prototype.getDevices=function(){return a(this,void 0,void 0,function(){var t,e=this;return s(this,function(n){switch(n.label){case 0:return this.backendSrv.get("/api/datasources").then(function(t){e.region=Object(o.a)(t),e.setRegion(e.region),e.apiReady=!0}),[4,this._get("/api/v5/devices")];case 1:return(t=n.sent()).data&&t.data.devices?[2,t.data.devices]:[2,[]]}})})},t.prototype.getUsers=function(){return a(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/users")];case 1:return[2,t.sent()]}})})},t.prototype.getFieldValues=function(t){var e="SELECT DISTINCT "+t+" FROM all_devices ORDER BY "+t+" ASC";return this.invokeSQLQuery(e)},t.prototype.getCustomDimensions=function(){return a(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/customdimensions")];case 1:return[2,t.sent().data.customDimensions]}})})},t.prototype.getSavedFilters=function(){return a(this,void 0,void 0,function(){return s(this,function(t){switch(t.label){case 0:return[4,this._get("/api/v5/saved-filters")];case 1:return[2,t.sent().data]}})})},t.prototype.invokeTopXDataQuery=function(t){var e={queries:[{query:t,bucketIndex:0}]};return this._post("/api/v5/query/topXdata",e)},t.prototype.invokeSQLQuery=function(t){var e={query:t};return this._post("/api/v5/query/sql",e)},t.prototype._get=function(t){return a(this,void 0,void 0,function(){var e=this;return s(this,function(n){switch(n.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(t){e.setRegion(Object(o.a)(t))})];case 1:n.sent(),n.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"GET",url:this.baseUrl+"/"+this.region+t}).catch(function(t){return console.error(t),t.err?Promise.reject(t.err):Promise.reject(t)})]}})})},t.prototype._post=function(t,e){return a(this,void 0,void 0,function(){var n=this;return s(this,function(r){switch(r.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(t){n.setRegion(Object(o.a)(t))})];case 1:r.sent(),r.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"POST",url:this.baseUrl+"/"+this.region+t,data:e}).then(function(t){return t.data?t.data:[]}).catch(function(t){return console.error(t),t.err?Promise.reject(t.err):Promise.reject(t)})]}})})},t}();i.a.module("grafana.services").service("kentikAPISrv",u)},function(t,e){t.exports=n},,,,function(t,e,n){"use strict";n.r(e),n.d(e,"DeviceListCtrl",function(){return o});var r=n(4),i=n(2),o=function(){function t(t,e,n,i){this.$scope=t,this.$location=n,this.backendSrv=i,this.devices=[],this.pageReady=!1,this.kentik=new r.a(this.backendSrv),this.getDevices()}return t.$inject=["$scope","$injector","$location","backendSrv"],t.prototype.getDevices=function(){var t=this;try{this.kentik.getDevices().then(function(e){t.devices=e,t.pageReady=!0,t.$scope.$apply()})}catch(t){Object(i.a)(t)}},t.prototype.refresh=function(){this.getDevices()},t.prototype.gotoDashboard=function(t){this.$location.path("/dashboard/db/kentik-top-talkers").search({"var-device":t.device_name})},t.prototype.gotoDeviceDetail=function(t){this.$location.url("/plugins/kentik-app/page/device-details?device="+t.id)},t}();o.templateUrl="components/device_list.html"}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,