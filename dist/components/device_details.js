define(["lodash","angular","app/core/core"],function(e,t,i){return function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=10)}([function(t,i){t.exports=e},function(e,t,i){"use strict";function n(e){var t="default";for(var i in e)if("kentik-ds"===e[i].type)return t=e[i].jsonData.region;return t}i.d(t,"a",function(){return n})},function(e,i){e.exports=t},function(e,t,i){"use strict";i.d(t,"a",function(){return o}),i.d(t,"b",function(){return c});var n=i(5),r=i(0);function o(e){var t="";t+=e.status?"("+e.status+") ":"",t+=e.statusText?e.statusText+": ":"",e.data&&e.data.error?t+=e.data.error:e.err?t+=e.err:r.isString(e)&&(t+=e),n.appEvents.emit("alert-error",["Can't connect to Kentik API",t])}function c(e,t,i){var o="";o+=t.status?"("+t.status+") ":"",o+=t.statusText?t.statusText+": ":"",t.data&&t.data.error?o+=t.data.error:t.err?o+=t.err:r.isString(t)&&(o+=t),n.appEvents.emit("alert-"+i,[e,o])}},function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(2),r=i.n(n),o=i(1),c=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function c(e){try{s(n.next(e))}catch(e){o(e)}}function a(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){e.done?r(e.value):new i(function(t){t(e.value)}).then(c,a)}s((n=n.apply(e,t||[])).next())})},a=function(e,t){var i,n,r,o,c={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;c;)try{if(i=1,n&&(r=2&o[0]?n.return:o[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,o[1])).done)return r;switch(n=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return c.label++,{value:o[1],done:!1};case 5:c.label++,n=o[1],o=[0];continue;case 7:o=c.ops.pop(),c.trys.pop();continue;default:if(!(r=(r=c.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){c=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){c.label=o[1];break}if(6===o[0]&&c.label<r[1]){c.label=r[1],r=o;break}if(r&&c.label<r[2]){c.label=r[2],c.ops.push(o);break}r[2]&&c.ops.pop(),c.trys.pop();continue}o=t.call(e,c)}catch(e){o=[6,e],n=0}finally{i=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},s=function(){function e(e){var t=this;this.backendSrv=e,this.apiReady=!1,this.baseUrl="/api/plugin-proxy/kentik-app",e.get("/api/datasources").then(function(e){t.region=Object(o.a)(e),t.setRegion(t.region),t.apiReady=!0})}return e.$inject=["backendSrv"],e.prototype.setRegion=function(e){this.region=e},e.prototype.getDevices=function(){return c(this,void 0,void 0,function(){var e,t=this;return a(this,function(i){switch(i.label){case 0:return this.backendSrv.get("/api/datasources").then(function(e){t.region=Object(o.a)(e),t.setRegion(t.region),t.apiReady=!0}),[4,this._get("/api/v5/devices")];case 1:return(e=i.sent()).data&&e.data.devices?[2,e.data.devices]:[2,[]]}})})},e.prototype.getUsers=function(){return this._get("/api/v5/users")},e.prototype.getFieldValues=function(e){var t="SELECT DISTINCT "+e+" FROM all_devices ORDER BY "+e+" ASC";return this.invokeSQLQuery(t)},e.prototype.getCustomDimensions=function(){return c(this,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:return[4,this._get("/api/v5/customdimensions")];case 1:return[2,e.sent().data.customDimensions]}})})},e.prototype.getSavedFilters=function(){return c(this,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:return[4,this._get("/api/v5/saved-filters")];case 1:return[2,e.sent().data]}})})},e.prototype.invokeTopXDataQuery=function(e){var t={queries:[{query:e,bucketIndex:0}]};return this._post("/api/v5/query/topXdata",t)},e.prototype.invokeSQLQuery=function(e){var t={query:e};return this._post("/api/v5/query/sql",t)},e.prototype._get=function(e){return c(this,void 0,void 0,function(){var t=this;return a(this,function(i){switch(i.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(e){t.setRegion(Object(o.a)(e))})];case 1:i.sent(),i.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"GET",url:this.baseUrl+"/"+this.region+e}).catch(function(e){return console.error(e),e.err?Promise.reject(e.err):Promise.reject(e)})]}})})},e.prototype._post=function(e,t){return c(this,void 0,void 0,function(){var i=this;return a(this,function(n){switch(n.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(e){i.setRegion(Object(o.a)(e))})];case 1:n.sent(),n.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"POST",url:this.baseUrl+"/"+this.region+e,data:t}).then(function(e){return e.data?e.data:[]}).catch(function(e){return console.error(e),e.err?Promise.reject(e.err):Promise.reject(e)})]}})})},e}();r.a.module("grafana.services").service("kentikAPISrv",s)},function(e,t){e.exports=i},,,,,function(e,t,i){"use strict";i.r(t),i.d(t,"DeviceDetailsCtrl",function(){return c});var n=i(4),r=i(3),o=i(1),c=function(){function e(e,t,i,r,c){var a=this;this.$location=i,this.backendSrv=r,this.alertSrv=c,this.device={},this.deviceDTO={},this.pageReady=!1,this.region="default",r.get("/api/datasources").then(function(e){a.region=Object(o.a)(e),a.kentik=new n.a(a.backendSrv),a.kentik.setRegion(a.region),a.getDevice(i.search().device)})}return e.$inject=["$scope","$injector","$location","backendSrv","alertSrv"],e.prototype.addIP=function(){this.otherIps.push({ip:""})},e.prototype.removeIP=function(e){this.otherIps.splice(e,1)},e.prototype.getDevice=function(e){var t=this;this.backendSrv.get("/api/plugin-proxy/kentik-app/"+this.region+"/api/v5/device/"+e).then(function(e){t.device=e.device,t.updateDeviceDTO(),t.pageReady=!0})},e.prototype.gotoDashboard=function(e){this.$location.url("/dashboard/db/kentik-top-talkers?var-device="+e)},e.prototype.updateDeviceDTO=function(){this.deviceDTO={device_id:this.device.id,device_name:this.device.device_name,device_type:this.device.device_type,device_description:this.device.device_description,device_flow_type:this.device.device_flow_type,device_sample_rate:parseInt(this.device.device_sample_rate,10),minimize_snmp:this.device.minimize_snmp,device_snmp_ip:this.device.device_snmp_ip,device_snmp_community:this.device.device_snmp_community,device_bgp_type:this.device.device_bgp_type,device_bgp_password:this.device.device_bgp_password,device_bgp_neighbor_ip:this.device.device_bgp_neighbor_ip,device_bgp_neighbor_asn:parseInt(this.device.device_bgp_neighbor_asn,10)}},e.prototype.update=function(){var e=this;this.deviceDTO.device_snmp_ip||delete this.deviceDTO.device_snmp_ip,this.deviceDTO.device_snmp_community||delete this.deviceDTO.device_snmp_community;var t={device:this.deviceDTO};this.backendSrv.put("/api/plugin-proxy/kentik-app/"+this.region+"/api/v5/device/"+this.deviceDTO.device_id,t).then(function(t){if(!("err"in t))return Object(r.b)("Device Updated.",e.deviceDTO.device_name,"success"),e.getDevice(e.deviceDTO.device_id);Object(r.b)("Device Update failed.",t.err,"error")},function(e){return"error"in e.data?void Object(r.b)("Device Update failed.",e.data.error,"error"):void Object(r.b)("Device Update failed.",e,"error")})},e}();c.templateUrl="components/device_details.html"}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,