define(["lodash","angular","app/core/core","app/plugins/sdk"],function(e,t,n,i){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(t,n){t.exports=e},function(e,t,n){"use strict";function i(e){var t="default";for(var n in e)if("kentik-ds"===e[n].type)return"custom"===(t=e[n].jsonData.region)&&console.log("getRegion(): Custom Dynamic URL: "+e[n].jsonData.dynamicUrl),t;return t}n.d(t,"a",function(){return i})},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"b",function(){return o});var i=n(5),r=n(0);function a(e){var t="";t+=e.status?"("+e.status+") ":"",t+=e.statusText?e.statusText+": ":"",e.data&&e.data.error?t+=e.data.error:e.err?t+=e.err:r.isString(e)&&(t+=e),i.appEvents.emit("alert-error",["Can't connect to Kentik API",t])}function o(e,t,n){var a="";a+=t.status?"("+t.status+") ":"",a+=t.statusText?t.statusText+": ":"",t.data&&t.data.error?a+=t.data.error:t.err?a+=t.err:r.isString(t)&&(a+=t),i.appEvents.emit("alert-"+n,[e,a])}},function(e,n){e.exports=t},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var i=n(3),r=n.n(i),a=n(1),o=function(e,t,n,i){return new(n||(n=Promise))(function(r,a){function o(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(o,s)}c((i=i.apply(e,t||[])).next())})},s=function(e,t){var n,i,r,a,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,i=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(r=(r=o.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){o.label=a[1];break}if(6===a[0]&&o.label<r[1]){o.label=r[1],r=a;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(a);break}r[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},c=function(){function e(e){var t=this;this.backendSrv=e,this.apiReady=!1,this.baseUrl="/api/plugin-proxy/kentik-app",e.get("/api/datasources").then(function(e){t.region=Object(a.a)(e),t.setRegion(t.region),t.apiReady=!0})}return e.$inject=["backendSrv"],e.prototype.setRegion=function(e){this.region=e},e.prototype.getDevices=function(){return o(this,void 0,void 0,function(){var e,t=this;return s(this,function(n){switch(n.label){case 0:return this.backendSrv.get("/api/datasources").then(function(e){t.region=Object(a.a)(e),t.setRegion(t.region),t.apiReady=!0}),[4,this._get("/api/v5/devices")];case 1:return(e=n.sent()).data&&e.data.devices?[2,e.data.devices]:[2,[]]}})})},e.prototype.getUsers=function(){return o(this,void 0,void 0,function(){return s(this,function(e){switch(e.label){case 0:return[4,this._get("/api/v5/users")];case 1:return[2,e.sent()]}})})},e.prototype.getFieldValues=function(e){var t="SELECT DISTINCT "+e+" FROM all_devices ORDER BY "+e+" ASC";return this.invokeSQLQuery(t)},e.prototype.getCustomDimensions=function(){return o(this,void 0,void 0,function(){return s(this,function(e){switch(e.label){case 0:return[4,this._get("/api/v5/customdimensions")];case 1:return[2,e.sent().data.customDimensions]}})})},e.prototype.getSavedFilters=function(){return o(this,void 0,void 0,function(){return s(this,function(e){switch(e.label){case 0:return[4,this._get("/api/v5/saved-filters")];case 1:return[2,e.sent().data]}})})},e.prototype.invokeTopXDataQuery=function(e){var t={queries:[{query:e,bucketIndex:0}]};return this._post("/api/v5/query/topXdata",t)},e.prototype.invokeSQLQuery=function(e){var t={query:e};return this._post("/api/v5/query/sql",t)},e.prototype._get=function(e){return o(this,void 0,void 0,function(){var t=this;return s(this,function(n){switch(n.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(e){t.setRegion(Object(a.a)(e))})];case 1:n.sent(),n.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"GET",url:this.baseUrl+"/"+this.region+e}).catch(function(e){return console.error(e),e.err?Promise.reject(e.err):Promise.reject(e)})]}})})},e.prototype._post=function(e,t){return o(this,void 0,void 0,function(){var n=this;return s(this,function(i){switch(i.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(e){n.setRegion(Object(a.a)(e))})];case 1:i.sent(),i.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"POST",url:this.baseUrl+"/"+this.region+e,data:t}).then(function(e){return e.data?e.data:[]}).catch(function(e){return console.error(e),e.err?Promise.reject(e.err):Promise.reject(e)})]}})})},e}();r.a.module("grafana.services").service("kentikAPISrv",c)},function(e,t){e.exports=n},function(e,t){e.exports=i},function(e,t){e.exports='<h3 class="page-heading">Enter your Kentik Credentials</h3>\n<div class="gf-form-group">\n  <div class="gf-form" ng-if="ctrl.apiError && ctrl.appModel.enabled">\n    <i class="fa fa-exclamation-circle" style="color: #ca4333;">\n      <span>Invalid API credentials. This app wont work until the credentials are updated.</span>\n    </i>\n  </div>\n  <div class="gf-form">\n    <label class="gf-form-label width-10">Email</label>\n    \x3c!-- Hidden input to stop chrome from autofilling --\x3e\n    <input style="display:none;" type="text" name="somefakename" />\n    <input type="text" class="gf-form-input width-30 max-width-30" ng-model=\'ctrl.appModel.jsonData.email\' placeholder="email" />\n  </div>\n\n  <div class="gf-form">\n    <label class="gf-form-label width-10">Region\n      <tip>US and EU regions are available. Default is US. A custom url can also be specified.</tip>\n    </label>\n    <div class="gf-form-select-wrapper">\n      <select class="gf-form-input" ng-model="ctrl.appModel.jsonData.region" ng-options="f.value as f.text for f in ctrl.regionTypes"></select>\n    </div>\n  </div>\n\n    \x3c!-- custom endpoint should display the url --\x3e\n  <div ng-if="ctrl.appModel.jsonData.region === \'custom\'" class="gf-form">\n    <label class="gf-form-label width-10">Custom URL\n      <tip>Specify custom url</tip>\n    </label>\n    <div ng-if="ctrl.appModel.jsonData.region === \'custom\'">\n      <input type="text" class="gf-form-input width-30 max-width-30" ng-model=\'ctrl.appModel.jsonData.dynamicUrl\' placeholder="https://grafana-api.kentik.com/api/v5" />\n    </div>\n  </div>\n\n  <div class="gf-form-inline">\n    <div class="gf-form kentik-inline-field-margin--right">\n      <label class="gf-form-label width-10">Api Token</label>\n      \x3c!-- Hidden input to stop chrome from autofilling --\x3e\n      <input style="display:none;" type="password" name="anotherfakename" />\n      <input type="password" class="gf-form-input width-30 max-width-30" ng-model="ctrl.appModel.secureJsonData.token" ng-if="!ctrl.appModel.jsonData.tokenSet"\n        placeholder="api token" />\n      <div ng-if="ctrl.appModel.jsonData.tokenSet" class="gf-form">\n        <input type="text" class="gf-form-input max-width-20" disabled="disabled" value="saved" />\n        <div ng-if="ctrl.appModel.enabled">\n          <i class="fa fa-exclamation-triangle" ng-if="!ctrl.apiValidated" alt="Could not validate api Token."></i>\n        </div>\n      </div>\n    </div>\n    <div class="gf-form">\n      <a class="btn btn-danger btn-small" href="#" ng-click="ctrl.reset()" ng-if="ctrl.appModel.jsonData.tokenSet">reset</a>\n    </div>\n  </div>\n</div>\n\n<div ng-if="ctrl.appModel.jsonData.tokenSet" class="kentik-enabled-box">\n  <i class="icon-gf icon-gf-check icon-gf-check kentik-icon-success"></i> Successfully enabled. <strong>Next up:\n  </strong><a href="dashboard/db/kentik-home" class="external-link">Go to Kentik Home Dashboard</a>\n</div>\n'},function(e,t,n){"use strict";n.r(t),n.d(t,"ConfigCtrl",function(){return p});var i=n(7),r=n.n(i),a=n(4),o=n(2),s=n(0),c=function(e,t,n,i){return new(n||(n=Promise))(function(r,a){function o(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(o,s)}c((i=i.apply(e,t||[])).next())})},d=function(e,t){var n,i,r,a,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,i=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(r=(r=o.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){o.label=a[1];break}if(6===a[0]&&o.label<r[1]){o.label=r[1],r=a;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(a);break}r[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},p=function(){function e(e,t,n){this.backendSrv=n,this.regionTypes=[{value:"default",text:"US (default)"},{value:"eu",text:"EU"},{value:"custom",text:"Custom"}],this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this)),this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this)),this.appModel.jsonData||(this.appModel.jsonData={}),this.appModel.secureJsonData||(this.appModel.secureJsonData={}),void 0===this.appModel.jsonData.region&&(this.appModel.jsonData.region="default"),this.apiValidated=!1,this.apiError=!1,this.kentik=new a.a(this.backendSrv),this.kentik.setRegion(this.appModel.jsonData.region),this.appModel.enabled&&this.appModel.jsonData.tokenSet&&this.validateApiConnection()}return e.$inject=["$scope","$injector","backendSrv"],e.prototype.preUpdate=function(){return this.appModel.secureJsonData.token&&(this.appModel.jsonData.tokenSet=!0),this.initDatasource()},e.prototype.postUpdate=function(){return c(this,void 0,void 0,function(){return d(this,function(e){switch(e.label){case 0:return this.appModel.enabled?[4,this.validateApiConnection()]:[2,Promise.resolve()];case 1:return e.sent(),[4,this.appEditCtrl.importDashboards()];case 2:return e.sent(),[2,{url:"dashboard/db/kentik-home",message:"Kentik Connect Pro app installed!"}]}})})},e.prototype.validateApiConnection=function(){return c(this,void 0,void 0,function(){var e,t;return d(this,function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,this.kentik.getUsers()];case 1:e=n.sent();try{e.hasOwnProperty("data")&&(this.apiValidated=!0,Object(o.b)("API working!","","success"))}catch(e){Object(o.a)("Unexpected result from API: "+e),this.apiValidated=!1,this.apiError=!0}return[3,3];case 2:return t=n.sent(),Object(o.a)(t),this.apiValidated=!1,this.apiError=!0,[3,3];case 3:return[2]}})})},e.prototype.reset=function(){this.appModel.jsonData.email="",this.appModel.jsonData.tokenSet=!1,this.appModel.jsonData.region="default",this.appModel.jsonData.dynamicUrl="",this.appModel.secureJsonData={},this.apiValidated=!1},e.prototype.initDatasource=function(){var e=this,t=this;return t.backendSrv.get("/api/datasources").then(function(n){var i=!1,r=!1,a=NaN;s.forEach(n,function(t){if("kentik-ds"===t.type)return i=!0,a=t.id,r=!0,t.jsonData.region!==e.appModel.jsonData.region&&(r=!0),void(t.jsonData!==e.appModel.jsonData&&(r=!0))});var o=[];if(!i||r){var c={name:"kentik",type:"kentik-ds",access:"proxy",jsonData:t.appModel.jsonData};r?o.push(t.backendSrv.put("/api/datasources/"+a,c)):o.push(t.backendSrv.post("/api/datasources",c))}return Promise.all(o)})},e}();p.template=r.a},function(e,t,n){"use strict";n.r(t),n.d(t,"DeviceListCtrl",function(){return a});var i=n(4),r=n(2),a=function(){function e(e,t,n,r){this.$scope=e,this.$location=n,this.backendSrv=r,this.devices=[],this.pageReady=!1,this.kentik=new i.a(this.backendSrv),this.getDevices()}return e.$inject=["$scope","$injector","$location","backendSrv"],e.prototype.getDevices=function(){var e=this;try{this.kentik.getDevices().then(function(t){e.devices=t,e.pageReady=!0,e.$scope.$apply()})}catch(e){Object(r.a)(e)}},e.prototype.refresh=function(){this.getDevices()},e.prototype.gotoDashboard=function(e){this.$location.path("/dashboard/db/kentik-top-talkers").search({"var-device":e.device_name})},e.prototype.gotoDeviceDetail=function(e){this.$location.url("/plugins/kentik-app/page/device-details?device="+e.id)},e}();a.templateUrl="components/device_list.html"},function(e,t,n){"use strict";n.r(t),n.d(t,"DeviceDetailsCtrl",function(){return o});var i=n(4),r=n(2),a=n(1),o=function(){function e(e,t,n,r,o){var s=this;this.$location=n,this.backendSrv=r,this.alertSrv=o,this.device={},this.deviceDTO={},this.pageReady=!1,r.get("/api/datasources").then(function(e){s.region=Object(a.a)(e),s.kentik=new i.a(s.backendSrv),s.kentik.setRegion(s.region),s.getDevice(n.search().device)})}return e.$inject=["$scope","$injector","$location","backendSrv","alertSrv"],e.prototype.addIP=function(){this.otherIps.push({ip:""})},e.prototype.removeIP=function(e){this.otherIps.splice(e,1)},e.prototype.getDevice=function(e){var t=this;this.backendSrv.get("/api/plugin-proxy/kentik-app/"+this.region+"/api/v5/device/"+e).then(function(e){t.device=e.device,t.updateDeviceDTO(),t.pageReady=!0})},e.prototype.gotoDashboard=function(e){this.$location.url("/dashboard/db/kentik-top-talkers?var-device="+e)},e.prototype.updateDeviceDTO=function(){this.deviceDTO={device_id:this.device.id,device_name:this.device.device_name,device_type:this.device.device_type,device_description:this.device.device_description,device_flow_type:this.device.device_flow_type,device_sample_rate:parseInt(this.device.device_sample_rate,10),minimize_snmp:this.device.minimize_snmp,device_snmp_ip:this.device.device_snmp_ip,device_snmp_community:this.device.device_snmp_community,device_bgp_type:this.device.device_bgp_type,device_bgp_password:this.device.device_bgp_password,device_bgp_neighbor_ip:this.device.device_bgp_neighbor_ip,device_bgp_neighbor_asn:parseInt(this.device.device_bgp_neighbor_asn,10)}},e.prototype.update=function(){var e=this;this.deviceDTO.device_snmp_ip||delete this.deviceDTO.device_snmp_ip,this.deviceDTO.device_snmp_community||delete this.deviceDTO.device_snmp_community;var t={device:this.deviceDTO};this.backendSrv.put("/api/plugin-proxy/kentik-app/"+this.region+"/api/v5/device/"+this.deviceDTO.device_id,t).then(function(t){if(!("err"in t))return Object(r.b)("Device Updated.",e.deviceDTO.device_name,"success"),e.getDevice(e.deviceDTO.device_id);Object(r.b)("Device Update failed.",t.err,"error")},function(e){return"error"in e.data?void Object(r.b)("Device Update failed.",e.data.error,"error"):void Object(r.b)("Device Update failed.",e,"error")})},e}();o.templateUrl="components/device_details.html"},function(e,t,n){"use strict";n.r(t),n.d(t,"AddDeviceCtrl",function(){return c});var i=n(0),r=n(3),a=n.n(r),o=n(1),s={device_name:"",device_type:"router",device_description:"",device_flow_type:"sflow",device_sample_rate:5,sending_ips:"",minimize_snmp:!1,device_bgp_type:"none",device_snmp_ip:"",device_snmp_community:""},c=function(){function e(e,t,n,i,r){var c=this;this.$location=n,this.backendSrv=i,this.alertSrv=r,this.device=a.a.copy(s),this.sendingIps=[{ip:""}],i.get("/api/datasources").then(function(e){c.region=Object(o.a)(e)})}return e.$inject=["$scope","$injector","$location","backendSrv","alertSrv"],e.prototype.addIP=function(){this.sendingIps.push({ip:""})},e.prototype.removeIP=function(e){this.sendingIps.splice(e,1)},e.prototype.addDevice=function(){var e=this,t=[];i.forEach(this.sendingIps,function(e){t.push(e.ip)}),this.device.sending_ips=t.join(),this.backendSrv.post("/api/plugin-proxy/kentik-app/"+this.region+"/api/v5/device",this.device).then(function(t){"err"in t?e.alertSrv.set("Device Add failed.",t.err,"error"):e.$location.url("/plugins/kentik-app/page/device-list")})},e}();c.templateUrl="components/add_device.html"},,,function(e,t,n){"use strict";n.r(t);n(18),n(23);var i=n(8);n.d(t,"ConfigCtrl",function(){return i.ConfigCtrl});var r=n(9);n.d(t,"DeviceListCtrl",function(){return r.DeviceListCtrl});var a=n(10);n.d(t,"DeviceDetailsCtrl",function(){return a.DeviceDetailsCtrl});var o=n(11);n.d(t,"AddDeviceCtrl",function(){return o.AddDeviceCtrl});var s=n(6);Object(s.loadPluginCss)({dark:"plugins/kentik-app/css/kentik.dark.css",light:"plugins/kentik-app/css/kentik.light.css"})},,,,function(e,t){},,,,,function(e,t){}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,