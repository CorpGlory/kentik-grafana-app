define(["lodash","angular","app/plugins/sdk","moment","app/core/table_model"],function(e,t,n,i,r){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=17)}([function(t,n){t.exports=e},function(e,t,n){"use strict";function i(e){var t="default";for(var n in e)if("kentik-ds"===e[n].type)return t=e[n].jsonData.region;return t}n.d(t,"a",function(){return i})},function(e,n){e.exports=t},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var i=n(2),r=n.n(i),o=n(1),s=function(e,t,n,i){return new(n||(n=Promise))(function(r,o){function s(e){try{u(i.next(e))}catch(e){o(e)}}function a(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(s,a)}u((i=i.apply(e,t||[])).next())})},a=function(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},u=function(){function e(e){var t=this;this.backendSrv=e,this.apiReady=!1,this.baseUrl="/api/plugin-proxy/kentik-app",e.get("/api/datasources").then(function(e){t.region=Object(o.a)(e),t.setRegion(t.region),t.apiReady=!0})}return e.$inject=["backendSrv"],e.prototype.setRegion=function(e){this.region=e},e.prototype.getDevices=function(){return s(this,void 0,void 0,function(){var e,t=this;return a(this,function(n){switch(n.label){case 0:return this.backendSrv.get("/api/datasources").then(function(e){t.region=Object(o.a)(e),t.setRegion(t.region),t.apiReady=!0}),[4,this._get("/api/v5/devices")];case 1:return(e=n.sent()).data&&e.data.devices?[2,e.data.devices]:[2,[]]}})})},e.prototype.getUsers=function(){return this._get("/api/v5/users")},e.prototype.getFieldValues=function(e){var t="SELECT DISTINCT "+e+" FROM all_devices ORDER BY "+e+" ASC";return this.invokeSQLQuery(t)},e.prototype.getCustomDimensions=function(){return s(this,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:return[4,this._get("/api/v5/customdimensions")];case 1:return[2,e.sent().data.customDimensions]}})})},e.prototype.getSavedFilters=function(){return s(this,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:return[4,this._get("/api/v5/saved-filters")];case 1:return[2,e.sent().data]}})})},e.prototype.invokeTopXDataQuery=function(e){var t={queries:[{query:e,bucketIndex:0}]};return this._post("/api/v5/query/topXdata",t)},e.prototype.invokeSQLQuery=function(e){var t={query:e};return this._post("/api/v5/query/sql",t)},e.prototype._get=function(e){return s(this,void 0,void 0,function(){var t=this;return a(this,function(n){switch(n.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(e){t.setRegion(Object(o.a)(e))})];case 1:n.sent(),n.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"GET",url:this.baseUrl+"/"+this.region+e}).catch(function(e){return console.error(e),e.err?Promise.reject(e.err):Promise.reject(e)})]}})})},e.prototype._post=function(e,t){return s(this,void 0,void 0,function(){var n=this;return a(this,function(i){switch(i.label){case 0:return void 0!==this.region?[3,2]:[4,this.backendSrv.get("/api/datasources").then(function(e){n.setRegion(Object(o.a)(e))})];case 1:i.sent(),i.label=2;case 2:return[2,this.backendSrv.datasourceRequest({method:"POST",url:this.baseUrl+"/"+this.region+e,data:t}).then(function(e){return e.data?e.data:[]}).catch(function(e){return console.error(e),e.err?Promise.reject(e.err):Promise.reject(e)})]}})})},e}();r.a.module("grafana.services").service("kentikAPISrv",u)},,function(e,t){e.exports=n},,,,,,function(e,t){e.exports=i},function(e,t){e.exports=r},,,,function(e,t,n){"use strict";n.r(t);var i=[{text:"Traffic",value:"Traffic",field:"traffic"},{text:"TopFlow",value:"TopFlow",field:"TopFlow"},{text:"Top flow IP",value:"TopFlowsIP",field:"TopFlowsIP"},{text:"Source Country",value:"Geography_src",field:"src_geo"},{text:"Source Geo Region",value:"src_geo_region",field:"src_geo_region"},{text:"Source Geo City",value:"src_geo_city",field:"src_geo_city"},{text:"Source As Number",value:"AS_src",field:"src_as"},{text:"Source Interface",value:"InterfaceID_src",field:"input_port"},{text:"Source Port",value:"Port_src",field:"l4_src_port"},{text:"Source VLAN",value:"VLAN_src",field:"vlan_in"},{text:"Source IP/CIDR",value:"IP_src",field:"ipv4_src_addr"},{text:"Source MAC Address",value:"src_eth_mac",field:"src_eth_mac"},{text:"Source Route Prefix/LEN",value:"src_route_prefix_len",field:"src_route_prefix_len"},{text:"Source Route LEN",value:"src_route_length",field:"src_route_length"},{text:"Source BGP Community",value:"src_bgp_community",field:"src_bgp_community"},{text:"Source BGP AS_Path",value:"src_bgp_aspath",field:"src_bgp_aspath"},{text:"Source BGP Next Hop IP/CIDR",value:"src_nexthop_ip",field:"ipv4_src_next_hop"},{text:"Source Next Hop AS Number",value:"src_nexthop_asn",field:"src_nexthop_as"},{text:"Source 2nd BGP_HOP AS Number",value:"src_second_asn",field:"src_second_asn"},{text:"Source 3nd BGP_HOP AS Number",value:"src_third_asn",field:"src_third_asn"},{text:"Source Protocol:IP Port",value:"src_proto_port",field:"src_proto_port"},{text:"Destination Country",value:"Geography_dst",field:"dst_geo"},{text:"Destination Region",value:"dst_geo_region",field:"dst_geo_region"},{text:"Destination City",value:"dst_geo_city",field:"dst_geo_city"},{text:"Destination As Number",value:"AS_dst",field:"dst_as"},{text:"Destination Interface",value:"InterfaceID_dst",field:"output_port"},{text:"Destination Port",value:"Port_dst",field:"l4_dst_port"},{text:"Destination VLAN",value:"VLAN_dst",field:"vlan_out"},{text:"Destination IP/CIDR",value:"IP_dst",field:"ipv4_dst_addr"},{text:"Destination MAC Address",value:"dst_eth_mac",field:"dst_eth_mac"},{text:"Destination Route Prefix/LEN",value:"dst_route_prefix_len",field:"dst_route_prefix_len"},{text:"Destination Route LEN",value:"dst_route_length",field:"dst_route_length"},{text:"Destination BGP Community",value:"dst_bgp_community",field:"dst_bgp_community"},{text:"Destination BGP AS_Path",value:"dst_bgp_aspath",field:"dst_bgp_aspath"},{text:"Destination BGP Next Hop IP/CIDR",value:"dst_nexthop_ip",field:"ipv4_dst_next_hop"},{text:"Destination Next Hop AS Number",value:"dst_nexthop_asn",field:"dst_nexthop_as"},{text:"Destination 2nd BGP_HOP AS Number",value:"dst_second_asn",field:"dst_second_asn"},{text:"Destination 3nd BGP_HOP AS Number",value:"dst_third_asn",field:"dst_third_asn"},{text:"Destination Protocol:IP Port",value:"dst_proto_port",field:"dst_proto_port"},{text:"Full Device",value:"i_device_id",field:"i_device_id"},{text:"Full Site",value:"i_device_site_name",field:"i_device_site_name"},{text:"Full Protocol",value:"Proto",field:"protocl"},{text:"Full INET Family",value:"inet_family",field:"inet_family"},{text:"Full TOS",value:"TOS",field:"tos"},{text:"Full TCP flags",value:"tcp_flags",field:"tcp_flags"},{text:"AS Top Talkers",value:"ASTopTalkers",field:"ASTopTalkers"},{text:"Interface Top Talkers",value:"InterfaceTopTalkers",field:"InterfaceTopTalkers"},{text:"Port to Port Talkers",value:"PortPortTalkers",field:"PortPortTalkers"},{text:"Region Top Talkers",value:"RegionTopTalkers",field:"RegionTopTalkers"}];var r=[{text:"Bits/s",value:"bytes",field:"f_sum_both_bytes",outsort:"avg_both",gfUnit:"bps",gfAxisLabel:"Bits/s",transform:function(e,t){return 8*e/t.i_duration},tableFields:[{text:"Avg",field:"avg_both",unit:"bps",transform:function(e,t,n){return 8*e/n}},{text:"95th Percentile",field:"p95th_both",unit:"bps"},{text:"Max",field:"max_both",unit:"bps"}]},{text:"Packets/s",value:"packets",field:"f_sum_both_pkts",outsort:"avg_both",gfUnit:"pps",gfAxislabel:"Packets/s",transform:function(e,t){return e/t.i_duration},tableFields:[{text:"Avg",field:"avg_both",unit:"pps",transform:function(e,t,n){return e/n}},{text:"95th Percentile",field:"p95th_both",unit:"pps"},{text:"Max",field:"max_both",unit:"pps"}]},{text:"Unique Src IPs",value:"unique_src_ip",field:"f_hll(inet_src_addr,0.0001)",outsort:"avg_ips",gfUnit:"short",gfAxisLabel:"Unique Src IPs",tableFields:[{text:"Average",field:"avg_ips",unit:"none"},{text:"p95th",field:"p95th_ips",unit:"none"},{text:"Max",field:"max_ips",unit:"none"},{text:"p95th mbps",field:"p95th_bits_per_sec",unit:"bps"},{text:"p95th pps",field:"p95th_pkts_per_sec",unit:"pps"}]},{text:"Unique Dst IPs",value:"unique_dst_ip",field:"f_hll(inet_dst_addr,0.0001)",outsort:"avg_ips",gfUnit:"short",gfAxisLabel:"Unique Dst IPs",tableFields:[{text:"Average",field:"avg_ips",unit:"none"},{text:"p95th",field:"p95th_ips",unit:"none"},{text:"Max",field:"max_ips",unit:"none"},{text:"p95th mbps",field:"p95th_bits_per_sec",unit:"bps"},{text:"p95th pps",field:"p95th_pkts_per_sec",unit:"pps"}]}],o=[{text:"Source City",field:"src_geo_city"},{text:"Source Region",field:"src_geo_region"},{text:"Source Country",field:"src_geo"},{text:"Source AS Number",field:"src_as"},{text:"Source AS Name",field:"src_as_name"},{text:"Source Flow Tag",field:"src_flow_tags"},{text:"Source IP Port",field:"l4_src_port"},{text:"Source MAC Address",field:"src_eth_mac"},{text:"Source VLAN",field:"vlan_in"},{text:"Source IP Address",field:"inet_src_addr"},{text:"Source Interface ID",field:"input_port"},{text:"Source Interface Name",field:"i_input_interface_description"},{text:"Source Interface Description",field:"i_input_snmp_alias"},{text:"Source Route Prefix",field:"ipv4_src_route_prefix"},{text:"Source Route LEN",field:"src_route_length"},{text:"Source BGP AS_PATH",field:"src_bgp_aspath"},{text:"Source BGP Community",field:"src_bgp_community"},{text:"Source Next Hop IP/CIDR",field:"ipv4_src_next_hop"},{text:"Source Next Hop AS Number",field:"src_nexthop_as"},{text:"Source Next Hop AS Name",field:"src_nexthop_as_name"},{text:"Source 2nd BGP_HOP AS Number",field:"src_second_asn"},{text:"Source 2nd BGP_HOP AS Name",field:"src_second_asn_name"},{text:"Source 3nd BGP_HOP AS Number",field:"src_third_asn"},{text:"Source 3nd BGP_HOP AS Name",field:"src_third_asn_name"},{text:"Destination City",field:"dst_geo_city"},{text:"Destination Region",field:"dst_geo_region"},{text:"Destination Country",field:"dst_geo"},{text:"Destination AS Number",field:"dst_as"},{text:"Destination AS Name",field:"dst_as_name"},{text:"Destination Flow Tag",field:"dst_flow_tags"},{text:"Destination IP Port",field:"l4_dst_port"},{text:"Destination MAC Address",field:"dst_eth_mac"},{text:"Destination VLAN",field:"vlan_out"},{text:"Destination IP Address",field:"inet_dst_addr"},{text:"Destination Interface ID",field:"output_port"},{text:"Destination Interface Name",field:"i_output_interface_description"},{text:"Destination Interface Description",field:"i_output_snmp_alias"},{text:"Destination Route Prefix",field:"ipv4_dst_route_prefix"},{text:"Destination Route LEN",field:"dst_route_length"},{text:"Destination BGP AS_PATH",field:"dst_bgp_aspath"},{text:"Destination BGP Community",field:"dst_bgp_community"},{text:"Destination Next Hop IP/CIDR",field:"ipv4_dst_next_hop"},{text:"Destination Next Hop AS Number",field:"dst_nexthop_as"},{text:"Destination Next Hop AS Name",field:"dst_nexthop_as_name"},{text:"Destination 2nd BGP_HOP AS Number",field:"dst_second_asn"},{text:"Destination 2nd BGP_HOP AS Name",field:"dst_second_asn_name"},{text:"Destination 3nd BGP_HOP AS Number",field:"dst_third_asn"},{text:"Destination 3nd BGP_HOP AS Name",field:"dst_third_asn_name"},{text:"TCP Flags",field:"tcp_flags"},{text:"TCP Flags (raw)",field:"tcp_flags_raw"},{text:"Protocol",field:"protocol"},{text:"INET Family",field:"inet_family"},{text:"Device Name",field:"i_device_name"},{text:"TCP Retransmits",field:"tcp_retransmit"},{text:"TOS/Diffserv",field:"tos"},{text:"Per-flow packets (both in and out)",field:"both_pkts"},{text:"Per-flow packets (recorded inbound)",field:"in_pkts"},{text:"Per-flow bytes (recorded inbound)",field:"in_bytes"},{text:"Per-flow packets (recorded outbound)",field:"out_pkts"},{text:"Per-flow bytes (recorded outbound)",field:"out_bytes"}],s=n(0),a=n(2),u=n.n(a),c=n(12),l=(n(4),function(e,t,n,i){return new(n||(n=Promise))(function(r,o){function s(e){try{u(i.next(e))}catch(e){o(e)}}function a(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(s,a)}u((i=i.apply(e,t||[])).next())})}),d=function(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};function f(){var e=new Date;return e.getTime()+60*e.getTimezoneOffset()*1e3}function p(e){var t=s.cloneDeep(e);return t.starting_time=null,t.ending_time=null,JSON.stringify(t)}var _=function(){function e(e,t){this.kentikAPI=t,this.cache={},this.cacheUpdateInterval=3e5,this.requestCachingIntervals={"1d":0},this.getDevices=this.kentikAPI.getDevices.bind(this.kentikAPI)}return e.$inject=["backendSrv","kentikAPISrv"],e.prototype.invokeTopXDataQuery=function(e){var t=this,n=s.cloneDeep(e),i=p(n);return this.shouldInvoke(e)?this.kentikAPI.invokeTopXDataQuery(e).then(function(e){var r=f();return t.cache[i]={timestamp:r,query:n,result:e},e}):Promise.resolve(this.cache[i].result)},e.prototype.shouldInvoke=function(e){var t=e,n=p(t),i=f(),r=Date.parse(t.starting_time),o=Date.parse(t.ending_time),s=o-r,a=this.cache[n]?Date.parse(this.cache[n].query.starting_time):null,u=this.cache[n]?Date.parse(this.cache[n].query.ending_time):null,l=u-a,d=function(e){var t=Date.parse(e.ending_time)-Date.parse(e.starting_time);return t>c.duration(1,"months")?36e5:t>c.duration(1,"day")?9e5:3e5}(t);return!this.cache[n]||i-o>d||this.cache[n]&&(i-u>d||r<a||Math.abs(s-l)>6e4)},e.prototype.getFieldValues=function(e){var t=this,n=f();return this.cache[e]&&n-this.cache[e].ts<this.cacheUpdateInterval?Promise.resolve(this.cache[e].value):this.kentikAPI.getFieldValues(e).then(function(i){return n=f(),t.cache[e]={ts:n,value:i},i})},e.prototype.getCustomDimensions=function(){return l(this,void 0,void 0,function(){var e,t=this;return d(this,function(n){switch(n.label){case 0:return void 0!==this.cache.customDimensions?[3,2]:[4,this.kentikAPI.getCustomDimensions()];case 1:e=n.sent(),this.cache.customDimensions=e.map(function(e){return{values:t._getDimensionPopulatorsValues(e),text:"Custom "+e.display_name,value:e.name,field:e.name}}),n.label=2;case 2:return[2,this.cache.customDimensions]}})})},e.prototype.getSavedFilters=function(){return l(this,void 0,void 0,function(){var e;return d(this,function(t){switch(t.label){case 0:return void 0!==this.cache.savedFilters?[3,2]:[4,this.kentikAPI.getSavedFilters()];case 1:e=t.sent(),this.cache.savedFilters=s.map(e,function(e){return{text:"Saved "+e.filter_name,field:e.filter_name,id:e.id}}),t.label=2;case 2:return[2,this.cache.savedFilters]}})})},e.prototype._getDimensionPopulatorsValues=function(e){return e.populators.reduce(function(e,t){return e.push(t.value),e},[])},e}();u.a.module("grafana.services").service("kentikProxySrv",_);var h=n(13),v=n.n(h),m="YYYY-MM-DD HH:mm:ss";function x(e){return"unique_src_ip"===e.value||"unique_dst_ip"===e.value?function(e){return[{name:"avg_ips",column:e.field,fn:"average",raw:!0,sample_rate:1},{name:"p95th_ips",column:e.field,fn:"percentile",rank:95,sample_rate:1},{name:"max_ips",column:e.field,fn:"max",sample_rate:1,raw:!0},{name:"p95th_bits_per_sec",column:"f_sum_both_bytes",fn:"percentile",rank:95,sample_rate:1},{name:"p95th_pkts_per_sec",column:"f_sum_both_pkts",fn:"percentile",rank:95,sample_rate:1}]}(e):function(e){return[{name:"avg_both",column:e.field,fn:"average",raw:!0,sample_rate:1},{name:"p95th_both",column:e.field,fn:"percentile",rank:95,sample_rate:1},{name:"max_both",column:e.field,fn:"max",sample_rate:1}]}(e)}function g(e,t){return"!="===e.operator&&(e.operator="<>"),{filterField:t.field,operator:e.operator,filterValue:e.value}}var b,y={buildTopXdataQuery:function(e){var t,n,i=s.find(r,{value:e.unit}),o=e.range.from.utc().format(m),a=e.range.to.utc().format(m);return{dimension:[e.metric],metric:e.unit,matrixBy:[],cidr:32,cidr6:128,topx:"8",depth:100,fastData:"Auto",lookback_seconds:0,time_format:"UTC",starting_time:o,ending_time:a,device_name:e.deviceNames,outsort:i.outsort,aggregates:x(i),filters_obj:(t=e.kentikFilterGroups,n={connector:"All",filterGroups:[]},t.length&&(n.filterGroups=t),n),saved_filters:e.kentikSavedFilters}},formatAggs:x,convertToKentikFilterGroup:function(e,t,n){var i,r=[],a=[];if(e.length){for(var u=s.concat(o,t),c=0,l=e;c<l.length;c++){var d=l[c],f=s.find(u,{text:d.key});if(void 0===f){var p=s.find(n,{text:d.key});a.push((i=d,{filter_id:p.id,is_not:"exclude"===i.value}))}else r.push(g(d,f))}if(r.length>0){var _="All";!e[0].condition||"or"!==e[0].condition.toLowerCase()&&"any"!==e[0].condition.toLowerCase()||(_="Any"),r=[{connector:_,filters:r,not:!1}]}}return{kentikFilters:r,savedFilters:a}}},k=function(e,t,n,i){return new(n||(n=Promise))(function(r,o){function s(e){try{u(i.next(e))}catch(e){o(e)}}function a(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(s,a)}u((i=i.apply(e,t||[])).next())})},S=function(e,t){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},P=function(){function e(e,t,n){this.instanceSettings=e,this.templateSrv=t,this.name=e.name,this.kentik=n}return e.$inject=["instanceSettings","templateSrv","kentikProxySrv"],e.prototype.interpolateDeviceField=function(e,t){return t.multi||t.includeAll?"string"==typeof e?e:e.join(","):e},e.prototype.query=function(e){return k(this,void 0,void 0,function(){var t,n,i,r,o,s,a,u;return S(this,function(c){switch(c.label){case 0:return e.targets&&0!==e.targets.length?(t=e.targets[0],n=this.templateSrv.replace(t.device,e.scopedVars,this.interpolateDeviceField.bind(this)),i=this.templateSrv.getAdhocFilters(this.name),[4,this.kentik.getCustomDimensions()]):[2,Promise.resolve({data:[]})];case 1:return r=c.sent(),[4,this.kentik.getSavedFilters()];case 2:return o=c.sent(),s=y.convertToKentikFilterGroup(i,r,o),a={deviceNames:n,range:{from:e.range.from,to:e.range.to},metric:this.templateSrv.replace(t.metric),unit:this.templateSrv.replace(t.unit),kentikFilterGroups:s.kentikFilters,kentikSavedFilters:s.savedFilters},u=y.buildTopXdataQuery(a),[2,this.kentik.invokeTopXDataQuery(u).then(this.processResponse.bind(this,u,t.mode,e)).then(function(e){return{data:e}})]}})})},e.prototype.processResponse=function(e,t,n,o){return k(this,void 0,void 0,function(){var a,u,c,l;return S(this,function(d){switch(d.label){case 0:return o.results?0===(a=o.results[0].data).length?[2,[]]:[4,this._getExtendedDimensionsList(i)]:[2,Promise.reject({message:"no kentik data"})];case 1:return u=d.sent(),c=s.find(u,{value:e.dimension[0]}),l=s.find(r,{value:e.metric}),"table"===t?[2,this.processTableData(a,c,l)]:[2,this.processTimeSeries(a,e,n)]}})})},e.prototype.processTimeSeries=function(e,t,n){var i=[],r=t.topx;e.length<r&&(r=e.length);for(var o=0;o<r;o++){var a=e[o],u=s.find(a.timeSeries,function(e){return e.flow&&e.flow.length}),c=a.key;if(u){var l={target:c,datapoints:s.map(u.flow,function(e){return[e[1],e[0]]})};i.push(l)}}return i},e.prototype.processTableData=function(e,t,n){var i=new v.a;i.columns.push({text:t.text});for(var r=0,o=n.tableFields;r<o.length;r++){var a=o[r];i.columns.push({text:a.text,unit:a.unit})}return s.forEach(e,function(e){for(var t=[e.key],r=0,o=n.tableFields;r<o.length;r++){var a=e[o[r].field];s.isString(a)&&(a=parseFloat(a)),t.push(a)}i.rows.push(t)}),[i]},e.prototype.metricFindQuery=function(e){return k(this,void 0,void 0,function(){return S(this,function(t){return"metrics()"===e?[2,this._getExtendedDimensionsList(i)]:"units()"===e?[2,r]:[2,this.kentik.getDevices().then(function(e){return e.map(function(e){return{text:e.device_name,value:e.device_name}})})]})})},e.prototype.getTagKeys=function(){return k(this,void 0,void 0,function(){var e,t;return S(this,function(n){switch(n.label){case 0:return[4,this._getExtendedDimensionsList(o)];case 1:return e=n.sent(),[4,this.kentik.getSavedFilters()];case 2:return t=n.sent(),[2,s.concat(e,t)]}})})},e.prototype.getTagValues=function(e){return k(this,void 0,void 0,function(){var t,n,i,r;return S(this,function(a){switch(a.label){case 0:return e?void 0!==(t=s.find(o,{text:e.key}))?[3,5]:[4,this.kentik.getSavedFilters()]:[3,7];case 1:return n=a.sent(),void 0!==(t=s.find(n,{text:e.key}))?[3,3]:[4,this.kentik.getCustomDimensions()];case 2:return i=a.sent(),[2,s.find(i,{text:e.key}).values.map(function(e){return{text:e}})];case 3:return[2,[{text:"include"},{text:"exclude"}]];case 4:return[3,6];case 5:return r=t.field,[2,this.kentik.getFieldValues(r).then(function(e){return e.rows.map(function(e){return{text:e[r].toString()}})})];case 6:return[3,8];case 7:return[2,[]];case 8:return[2]}})})},e.prototype._getExtendedDimensionsList=function(e){return k(this,void 0,void 0,function(){var t;return S(this,function(n){switch(n.label){case 0:return[4,this.kentik.getCustomDimensions()];case 1:return t=n.sent(),[2,s.concat(e,t)]}})})},e}(),D=function(){function e(){}return e.templateUrl="datasource/config.html",e}(),A=n(6),w=(b=function(e,t){return(b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}b(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),T=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.target.mode=i.target.mode||"graph",i.queryModes=[{value:"graph",text:"Graph"},{value:"table",text:"Table"}],i}return w(t,e),t.$inject=["$scope","$injector"],t}(A.QueryCtrl);T.templateUrl="datasource/query_editor.html",n.d(t,"Datasource",function(){return P}),n.d(t,"ConfigCtrl",function(){return D}),n.d(t,"QueryCtrl",function(){return T})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,