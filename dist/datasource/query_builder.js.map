{"version":3,"sources":["../../src/datasource/query_builder.js"],"names":["formatMetricAggs","unitDef","aggs","field","formatUniqueIpAggs","formatAggs","value","formatFilters","kentikFilterGroups","filters_obj","length","filterGroups","buildTopXdataQuery","options","_","find","unitList","unit","query","metric","range","from","utc","format","to","deviceNames","outsort","convertToKentikFilter","filterObj","operator","filterField","filterFieldDef","filterFieldList","text","key","filterValue","convertToKentikFilterGroup","filters","kentikFilters","map","connector","condition","toLowerCase"],"mappings":"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","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\nimport { unitList, filterFieldList } from './metric_def';\n\nfunction formatMetricAggs(unitDef) {\n  let aggs = [\n    {\n      \"name\": \"avg_both\",\n      \"column\": unitDef.field,\n      \"fn\": \"average\",\n      \"raw\": true, // Set to get timeseries data\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"p95th_both\",\n      \"column\": unitDef.field,\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"max_both\",\n      \"column\": unitDef.field,\n      \"fn\": \"max\",\n      \"sample_rate\": 1\n    }\n  ];\n\n  return aggs;\n}\n\nfunction formatUniqueIpAggs(unitDef) {\n  let aggs = [\n    {\n      \"name\": \"avg_ips\",\n      \"column\": unitDef.field,\n      \"fn\": \"average\",\n      \"raw\": true,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"p95th_ips\",\n      \"column\": unitDef.field,\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"max_ips\",\n      \"column\": unitDef.field,\n      \"fn\": \"max\",\n      \"sample_rate\": 1,\n      \"raw\": true\n    },\n    {\n      \"name\": \"p95th_bits_per_sec\",\n      \"column\": \"f_sum_both_bytes\",\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"p95th_pkts_per_sec\",\n      \"column\": \"f_sum_both_pkts\",\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    }\n  ];\n\n  return aggs;\n}\n\nfunction formatAggs(unitDef) {\n  let aggs = [];\n  if (unitDef.value === \"unique_src_ip\" ||\n      unitDef.value === \"unique_dst_ip\") {\n    aggs = formatUniqueIpAggs(unitDef);\n  } else {\n    aggs = formatMetricAggs(unitDef);\n  }\n\n  return aggs;\n}\n\nfunction formatFilters(kentikFilterGroups) {\n  let filters_obj = {\n    \"connector\": \"All\",\n    \"filterGroups\": []\n  };\n\n  if (kentikFilterGroups.length) {\n    filters_obj.filterGroups = kentikFilterGroups;\n  }\n\n  return filters_obj;\n}\n\nfunction buildTopXdataQuery(options) {\n  let unitDef = _.find(unitList, { value: options.unit });\n  let query = {\n    \"dimension\": [\n      options.metric\n    ],\n    \"metric\": options.unit,\n    \"matrixBy\": [],\n    \"cidr\": 32,\n    \"cidr6\": 128,\n    \"topx\": \"8\", // Visualization depth (8 by default)\n    \"depth\": 100,\n    \"fastData\": \"Auto\",\n    \"lookback_seconds\": 0,\n    \"time_format\": \"UTC\",\n    \"starting_time\": options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n    \"ending_time\": options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n    \"device_name\": options.deviceNames,\n    \"outsort\": unitDef.outsort,\n    \"aggregates\": formatAggs(unitDef),\n    \"filters_obj\": formatFilters(options.kentikFilterGroups)\n  };\n\n  return query;\n}\n\nfunction convertToKentikFilter(filterObj) {\n  // Use Kentik 'not equal' style\n  if (filterObj.operator === '!=') {\n    filterObj.operator = '<>';\n  }\n\n  // If no field definition found assume that custom field is used.\n  let filterField;\n  let filterFieldDef = _.find(filterFieldList, { text: filterObj.key });\n  if (filterFieldDef) {\n    filterField = filterFieldDef.field;\n  } else {\n    filterField = filterObj.key;\n  }\n\n  return {\n    filterField: filterField,\n    operator: filterObj.operator,\n    filterValue: filterObj.value\n  };\n}\n\nfunction convertToKentikFilterGroup(filters) {\n  if (filters.length) {\n    let kentikFilters = _.map(filters, convertToKentikFilter);\n    let connector = 'All';\n    if (filters[0].condition && (\n      filters[0].condition.toLowerCase() === 'or' ||\n      filters[0].condition.toLowerCase() === 'any')) {\n      connector = 'Any';\n    }\n    return [{\n      \"connector\": connector,\n      \"filters\": kentikFilters,\n      \"not\": false,\n    }];\n  } else {\n    return [];\n  }\n}\n\nexport default {\n  buildTopXdataQuery: buildTopXdataQuery,\n  formatAggs: formatAggs,\n  convertToKentikFilterGroup: convertToKentikFilterGroup\n};\n"]}