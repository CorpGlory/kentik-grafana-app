{"version":3,"sources":["../../src/datasource/query_builder.js"],"names":["formatAggs","unitDef","aggs","field","formatFilters","kentikFilterGroups","filters_obj","length","buildTopXdataQuery","options","_","find","unitList","value","unit","query","metric","range","from","utc","format","to","deviceNames","convertToKentikFilter","filterObj","operator","filterField","filterFieldDef","filterFieldList","text","key","filterValue","convertToKentikFilterGroup","filters","kentikFilters","map","connector","condition","toLowerCase"],"mappings":"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","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\nimport { unitList, filterFieldList } from './metric_def';\n\nfunction formatAggs(unitDef) {\n  let aggs = [];\n  if (unitDef.field === \"f_countdistinct_inet_src_addr\" ||\n    unitDef.field === \"f_countdistinct_inet_dst_addr\") {\n    aggs = [\n      {\n        \"name\": unitDef.field,\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_bits_per_sec\",\n        \"column\": \"f_sum_both_bytes\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_pkts_per_sec\",\n        \"column\": \"f_sum_both_pkts\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      }];\n  } else {\n    aggs = [\n      {\n        \"name\": unitDef.field, // avg_bits_per_sec\n        \"column\": unitDef.field,\n        \"fn\": \"average\",\n        \"properName\": \"Average\",\n        \"raw\": true, // Set to get timeseries data\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"properName\": \"95th Percentile\",\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"max_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      }];\n  }\n  return aggs;\n}\n\nfunction formatFilters(kentikFilterGroups) {\n  let filters_obj = {};\n  if (kentikFilterGroups.length) {\n    filters_obj = {\n      \"connector\": \"All\",\n      \"custom\": false,\n      \"filterGroups\": kentikFilterGroups,\n      \"filterString\": \"\"\n    };\n  }\n\n  return filters_obj;\n}\n\nfunction buildTopXdataQuery(options) {\n  let unitDef = _.find(unitList, { value: options.unit });\n  let query = {\n    \"dimension\": [\n      options.metric\n    ],\n    \"metric\": options.unit,\n    \"matrixBy\": [],\n    \"cidr\": 32,\n    \"cidr6\": 128,\n    \"topx\": 8, // Visualization depth (8 by default)\n    \"depth\": 100,\n    \"fastData\": \"Auto\",\n    \"lookback_seconds\": 0,\n    \"time_format\": \"UTC\",\n    \"starting_time\": options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n    \"ending_time\": options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n    \"device_name\": options.deviceNames,\n    \"bucket\": \"\",\n    \"bucketIndex\": -1,\n    \"outsort\": unitDef.field,\n    \"aggregates\": formatAggs(unitDef),\n    \"filters_obj\": formatFilters(options.kentikFilterGroups)\n  };\n\n  return query;\n}\n\nfunction convertToKentikFilter(filterObj) {\n  // Use Kentik 'not equal' style\n  if (filterObj.operator === '!=') {\n    filterObj.operator = '<>';\n  }\n\n  // If no field definition found assume that custom field is used.\n  let filterField;\n  let filterFieldDef = _.find(filterFieldList, { text: filterObj.key });\n  if (filterFieldDef) {\n    filterField = filterFieldDef.field;\n  } else {\n    filterField = filterObj.key;\n  }\n\n  return {\n    filterField: filterField,\n    operator: filterObj.operator,\n    filterValue: filterObj.value\n  };\n}\n\nfunction convertToKentikFilterGroup(filters) {\n  if (filters.length) {\n    let kentikFilters = _.map(filters, convertToKentikFilter);\n    let connector = 'All';\n    if (filters[0].condition && (\n      filters[0].condition.toLowerCase() === 'or' ||\n      filters[0].condition.toLowerCase() === 'any')) {\n      connector = 'Any';\n    }\n    return [{\n      \"connector\": connector,\n      \"filters\": kentikFilters,\n      \"not\": false,\n    }];\n  } else {\n    return [];\n  }\n}\n\nexport default {\n  buildTopXdataQuery: buildTopXdataQuery,\n  formatAggs: formatAggs,\n  convertToKentikFilterGroup: convertToKentikFilterGroup\n};\n"]}