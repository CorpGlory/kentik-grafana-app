{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["metricList","unitList","_","TableModel","KentikDatasource","instanceSettings","backendSrv","templateSrv","value","variable","multi","includeAll","join","options","targets","length","Promise","resolve","data","target","deviceNames","replace","device","scopedVars","interpolateDeviceField","bind","query","version","device_name","time_type","lookback_seconds","starting_time","range","from","utc","format","ending_time","to","metric","fast_data","units","unit","filterSettings","connector","filterString","filterGroups","endpoint","mode","datasourceRequest","method","url","then","processResponse","reject","message","rows","metricDef","find","unitDef","processTopXData","processTimeSeries","seriesList","endIndex","rangeRaw","i","row","field","seriesName","series","datapoints","gfUnit","axisLabel","gfAxisLabel","transform","time","Date","i_start_time","getTime","push","map","table","rangeSeconds","valueOf","columns","text","tableFields","col","values","val","isString","parseFloat","res"],"mappings":"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","file":"datasource.js","sourcesContent":["import {metricList, unitList} from './metric_def';\nimport _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nclass KentikDatasource {\n\n  constructor(instanceSettings, backendSrv, templateSrv)  {\n    this.instanceSettings = instanceSettings;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  interpolateDeviceField(value, variable) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return value.join(',');\n  }\n\n  query(options) {\n    if (!options.targets || options.targets.length === 0) {\n      return Promise.resolve({data: []});\n    }\n\n    var target = options.targets[0];\n    var deviceNames = this.templateSrv.replace(target.device, options.scopedVars, this.interpolateDeviceField.bind(this));\n\n    var query = {\n      version: \"2.01\",\n      query: {\n        device_name: deviceNames,\n        time_type: 'fixed', // or fixed\n        lookback_seconds: 3600,\n        starting_time: options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        ending_time: options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        metric: this.templateSrv.replace(target.metric),\n        fast_data: \"Auto\", // or Fast or Full\n        units: this.templateSrv.replace(target.unit)\n      },\n      filterSettings: {\n        connector: 'All',\n        filterString: '',\n        filterGroups: []\n      }\n    };\n\n    var endpoint = 'timeSeriesData';\n    if (target.mode === 'table') {\n      endpoint = 'topXData';\n    }\n\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: 'api/plugin-proxy/kentik-app/api/v4/dataExplorer/' + endpoint,\n      data: query\n    }).then(this.processResponse.bind(this, query, endpoint, options));\n  }\n\n  processResponse(query, endpoint, options, data) {\n    if (!data.data) {\n      return Promise.reject({message: 'no kentik data'});\n    }\n\n    var rows = data.data;\n    if (rows.length === 0) {\n      return [];\n    }\n\n    var metricDef = _.find(metricList, {value: query.query.metric});\n    var unitDef = _.find(unitList, {value: query.query.units});\n\n    if (endpoint === 'topXData') {\n      return this.processTopXData(rows, metricDef, unitDef, options);\n    } else {\n      return this.processTimeSeries(rows, metricDef, unitDef, options);\n    }\n  }\n\n  processTimeSeries(rows, metricDef, unitDef, options) {\n    var seriesList = {};\n    var endIndex = rows.length;\n\n    // if time range is to now ignore last data point\n    if (options.rangeRaw.to === 'now') {\n      endIndex = endIndex - 1;\n    }\n\n    for (var i = 0; i < endIndex; i++) {\n      var row = rows[i];\n      var value = row[unitDef.field];\n      var seriesName = row[metricDef.field];\n      var series = seriesList[seriesName];\n\n      if (!series) {\n        series = seriesList[seriesName] = {\n          target: seriesName,\n          datapoints: [],\n          unit: unitDef.gfUnit,\n          axisLabel: unitDef.gfAxisLabel\n        };\n      }\n\n      if (unitDef.transform) {\n        value = unitDef.transform(value, row);\n      }\n\n      var time = new Date(row.i_start_time).getTime();\n      series.datapoints.push([value, time]);\n    }\n\n    // turn seriesList hash to array\n    return { data: _.map(seriesList, value => value) };\n  }\n\n  processTopXData(rows, metricDef, unitDef, options) {\n    var table = new TableModel();\n    var rangeSeconds = (options.range.to.valueOf() - options.range.from.valueOf()) / 1000;\n\n    table.columns.push({text: metricDef.text});\n\n    for (let col of unitDef.tableFields) {\n      table.columns.push({text: col.text, unit: col.unit});\n    }\n\n    for (let row of rows) {\n      var seriesName = row[metricDef.field];\n\n      var values = [seriesName];\n      for (let col of unitDef.tableFields) {\n        var val = row[col.field];\n        var transform = col.transform || unitDef.transform;\n\n        if (_.isString(val)) {\n          val = parseFloat(val);\n        }\n\n        if (transform) {\n          val = transform(val, row, rangeSeconds);\n        }\n\n        values.push(val);\n      }\n\n      table.rows.push(values);\n    }\n\n    return {data: [table]};\n  }\n\n  metricFindQuery(query) {\n    if (query === 'metrics()') {\n      return Promise.resolve(metricList);\n    }\n    if (query === 'units()') {\n      return Promise.resolve(unitList);\n    }\n\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: 'api/plugin-proxy/kentik-app/api/v1/device/list',\n    }).then(res => {\n      if (!res.data || !res.data.device) {\n        return [];\n      }\n\n      return res.data.device.map(device => {\n        return {text: device.device_name, value: device.device_name};\n      });\n    });\n  }\n}\n\nexport {KentikDatasource};\n"]}