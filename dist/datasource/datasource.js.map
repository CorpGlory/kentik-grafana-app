{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["metricList","unitList","filterFieldList","_","TableModel","KentikDatasource","instanceSettings","templateSrv","kentikAPISrv","name","kentik","value","variable","multi","includeAll","join","filterObj","filterField","find","text","key","field","operator","filterValue","options","targets","length","Promise","resolve","data","target","deviceNames","replace","device","scopedVars","interpolateDeviceField","bind","kentikFilters","getAdhocFilters","map","convertToKentikFilter","query_options","range","from","to","metric","unit","query","formatQuery","invokeQuery","then","processResponse","mode","results","reject","message","bucketData","metricDef","queries","dimension","unitDef","processTableData","processTimeSeries","seriesList","endIndex","topx","i","series","timeseries","timeSeries","flow","seriesName","grafana_series","datapoints","point","push","table","columns","tableFields","col","forEach","row","values","val","isString","parseFloat","rows","getDevices","devices","device_name"],"mappings":"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","file":"datasource.js","sourcesContent":["import {metricList, unitList, filterFieldList} from './metric_def';\nimport _ from 'lodash';\nimport TableModel from 'app/core/table_model';\nimport './kentikAPI';\n\nclass KentikDatasource {\n\n  constructor(instanceSettings, templateSrv, kentikAPISrv)  {\n    this.instanceSettings = instanceSettings;\n    this.name = instanceSettings.name;\n    this.templateSrv = templateSrv;\n    this.kentik = kentikAPISrv;\n  }\n\n  interpolateDeviceField(value, variable) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return value.join(',');\n  }\n\n  convertToKentikFilter(filterObj) {\n    return {\n      filterField: _.find(filterFieldList, {text: filterObj.key}).field,\n      operator: filterObj.operator,\n      filterValue: filterObj.value\n    };\n  }\n\n  query(options) {\n    if (!options.targets || options.targets.length === 0) {\n      return Promise.resolve({data: []});\n    }\n\n    let target = options.targets[0];\n    let deviceNames = this.templateSrv.replace(target.device, options.scopedVars, this.interpolateDeviceField.bind(this));\n\n    let kentikFilters = this.templateSrv.getAdhocFilters(this.name);\n    kentikFilters = _.map(kentikFilters, this.convertToKentikFilter);\n\n    let query_options = {\n      deviceNames: deviceNames,\n      range: {\n        from: options.range.from,\n        to: options.range.to\n      },\n      metric: this.templateSrv.replace(target.metric),\n      unit: this.templateSrv.replace(target.unit),\n      kentikFilters: kentikFilters\n    };\n    let query = this.kentik.formatQuery(query_options);\n\n    return this.kentik.invokeQuery(query)\n    .then(this.processResponse.bind(this, query, target.mode, options));\n  }\n\n  processResponse(query, mode, options, data) {\n    if (!data.data.results) {\n      return Promise.reject({message: 'no kentik data'});\n    }\n\n    var bucketData = data.data.results[0].data;\n    if (bucketData.length === 0) {\n      return [];\n    }\n\n    var metricDef = _.find(metricList, {value: query.queries[0].query.dimension[0]});\n    var unitDef = _.find(unitList, {value: query.queries[0].query.metric});\n\n    if (mode === 'table') {\n      return this.processTableData(bucketData, metricDef, unitDef);\n    } else {\n      return this.processTimeSeries(bucketData, query, options);\n    }\n  }\n\n  processTimeSeries(bucketData, query) {\n    let seriesList = [];\n    let endIndex = query.queries[0].query.topx;\n    if (bucketData.length < endIndex) {\n      endIndex = bucketData.length;\n    }\n\n    for (let i = 0; i < endIndex; i++) {\n      let series = bucketData[i];\n      let timeseries = _.find(series.timeSeries, series => {\n        return series.flow && series.flow.length;\n      });\n      let seriesName = series.key;\n\n      if (timeseries) {\n        let grafana_series = {\n          target: seriesName,\n          datapoints: timeseries.flow.map(point => {\n            return [point[1], point[0]];\n          })\n        };\n        seriesList.push(grafana_series);\n      }\n    }\n\n    return { data: seriesList };\n  }\n\n  processTableData(bucketData, metricDef, unitDef) {\n    var table = new TableModel();\n\n    table.columns.push({text: metricDef.text});\n\n    for (let col of unitDef.tableFields) {\n      table.columns.push({text: col.text, unit: col.unit});\n    }\n\n    bucketData.forEach(row => {\n      var seriesName = row.key;\n\n      var values = [seriesName];\n      for (let col of unitDef.tableFields) {\n        var val = row[col.field];\n\n        if (_.isString(val)) {\n          val = parseFloat(val);\n        }\n\n        values.push(val);\n      }\n\n      table.rows.push(values);\n    });\n\n    return {data: [table]};\n  }\n\n  metricFindQuery(query) {\n    if (query === 'metrics()') {\n      return Promise.resolve(metricList);\n    }\n    if (query === 'units()') {\n      return Promise.resolve(unitList);\n    }\n\n    return this.kentik.getDevices()\n    .then(devices => {\n      return devices.map(device => {\n        return {text: device.device_name, value: device.device_name};\n      });\n    });\n  }\n\n  getTagKeys() {\n    return Promise.resolve(filterFieldList);\n  }\n\n  getTagValues(options) {\n    if (options) {\n      return Promise.resolve([]);\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n}\n\nexport {KentikDatasource};\n"]}