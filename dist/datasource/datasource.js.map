{"version":3,"sources":["../../src/datasource/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCACM;AACJ,iBADI,gBACJ,CAAY,gBAAZ,EAA8B,UAA9B,EAA0C,EAA1C,EAA+C;gCAD3C,kBAC2C;;AAC7C,eAAK,gBAAL,GAAwB,gBAAxB,CAD6C;AAE7C,eAAK,UAAL,GAAkB,UAAlB,CAF6C;AAG7C,eAAK,EAAL,GAAU,EAAV,CAH6C;SAA/C;;qBADI;;wCAOU,OAAO;AACnB,gBAAI,aAAa,kBAAkB,CAAC,MAAM,IAAN,CAAW,OAAX,KAAuB,IAAvB,CAAD,CAA8B,OAA9B,CAAsC,CAAtC,CAAlB,CADE;AAEnB,0BAAc,sBAAsB,CAAC,MAAM,EAAN,CAAS,OAAT,KAAqB,IAArB,CAAD,CAA4B,OAA5B,CAAoC,CAApC,CAAtB,CAFK;AAGnB,mBAAO,UAAP,CAHmB;;;;gCAMf,SAAS;;;AAGb,gBAAI,QAAQ;AACV,uBAAS,MAAT;AACA,qBAAO;AACL,6BAAa,QAAb;AACA,2BAAW,UAAX;AACA,kCAAkB,IAAlB;AACA,+BAAe,IAAf;AACA,6BAAa,IAAb;AACA,wBAAQ,SAAR;AACA,2BAAW,MAAX;AACA,6BAAa,QAAb,EARF;;AAUA,8BAAgB;AACd,2BAAW,KAAX;AACA,8BAAc,EAAd;AACA,8BAAc,EAAd;eAHF;aAZE,CAHS;AAqBb,oBAAQ,GAAR,CAAY,gBAAZ,EAA8B,KAA9B,EArBa;;AAuBb,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,sBAAQ,MAAR;AACA,mBAAK,gEAAL;AACA,oBAAM,KAAN;aAHK,EAIJ,IAJI,CAIC,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAJD,CAAP,CAvBa;;;;0CA8BC,MAAM;AACpB,gBAAI,CAAC,KAAK,IAAL,EAAW;AACd,qBAAO,KAAK,EAAL,CAAQ,MAAR,CAAe,EAAC,SAAS,gBAAT,EAAhB,CAAP,CADc;aAAhB;;AAIA,gBAAI,OAAO,KAAK,IAAL,CALS;AAMpB,gBAAI,KAAK,MAAL,KAAgB,CAAhB,EAAmB;AACrB,qBAAO,EAAP,CADqB;aAAvB;;AAIA,gBAAI,aAAa,EAAb,CAVgB;AAWpB,gBAAI,SAAS,EAAC,QAAQ,SAAR,EAAmB,YAAY,EAAZ,EAA7B,CAXgB;;AAapB,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACpC,kBAAI,MAAM,KAAK,CAAL,CAAN,CADgC;AAEpC,kBAAI,QAAQ,IAAI,gBAAJ,CAFwB;AAGpC,kBAAI,OAAO,IAAI,IAAJ,CAAS,IAAI,YAAJ,CAAT,CAA2B,OAA3B,EAAP,CAHgC;AAIpC,qBAAO,UAAP,CAAkB,IAAlB,CAAuB,CAAC,KAAD,EAAQ,IAAR,CAAvB,EAJoC;aAAtC;;AAOA,uBAAW,IAAX,CAAgB,MAAhB,EApBoB;AAqBpB,mBAAO,EAAC,MAAM,UAAN,EAAR,CArBoB;;;;eA3ClB;;;kCAqEE","file":"datasource.js","sourcesContent":["\nclass KentikDatasource {\n  constructor(instanceSettings, backendSrv, $q)  {\n    this.instanceSettings = instanceSettings;\n    this.backendSrv = backendSrv;\n    this.$q = $q;\n  }\n\n  getTimeFilter(range) {\n    var timeFilter = 'ctimestamp > ' + (range.from.valueOf() / 1000).toFixed(0);\n    timeFilter += ' OR ctimestamp < ' + (range.to.valueOf() / 1000).toFixed(0);\n    return timeFilter;\n  }\n\n  query(options) {\n    // var query = options.targets[0].target;\n    // query = query.replace('$timeFilter', this.getTimeFilter(options.range));\n    var query = {\n      version: \"2.01\",\n      query: {\n        device_name: 'nntp2a',\n        time_type: 'relative', // or fixed\n        lookback_seconds: 3600,\n        starting_time: null,\n        ending_time: null,\n        metric: \"Traffic\",\n        fast_data: \"Auto\", // or Fast or Full\n        device_type: 'router', // or host,\n      },\n      filterSettings: {\n        connector: 'All',\n        filterString: '',\n        filterGroups: []\n      }\n    };\n    console.log('Kentik query: ', query);\n\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: 'api/plugin-proxy/kentik-app/api/v4/dataExplorer/timeSeriesData',\n      data: query\n    }).then(this.processResponse.bind(this));\n  }\n\n  processResponse(data) {\n    if (!data.data) {\n      return this.$q.reject({message: 'no kentik data'});\n    }\n\n    var rows = data.data;\n    if (rows.length === 0) {\n      return [];\n    }\n\n    var seriesList = [];\n    var series = {target: 'traffic', datapoints: []};\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      var value = row.f_sum_both_bytes;\n      var time = new Date(row.i_start_time).getTime();\n      series.datapoints.push([value, time]);\n    }\n\n    seriesList.push(series);\n    return {data: seriesList};\n  }\n\n}\n\nexport {KentikDatasource};\n"]}