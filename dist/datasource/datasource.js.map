{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["metricList","unitList","filterFieldList","_","TableModel","KentikDatasource","instanceSettings","templateSrv","kentikProxySrv","name","kentik","value","variable","multi","includeAll","join","filterObj","operator","filterField","find","text","key","field","filterValue","filters","length","kentikFilters","map","convertToKentikFilter","connector","condition","toLowerCase","options","targets","Promise","resolve","data","target","deviceNames","replace","device","scopedVars","interpolateDeviceField","bind","getAdhocFilters","convertToKentikFilterGroup","query_options","range","from","to","metric","unit","kentikFilterGroups","query","formatQuery","invokeQuery","then","processResponse","mode","results","reject","message","bucketData","metricDef","dimension","unitDef","processTableData","processTimeSeries","seriesList","endIndex","topx","i","series","timeseries","timeSeries","flow","seriesName","grafana_series","datapoints","point","push","table","columns","tableFields","col","forEach","row","values","val","isString","parseFloat","rows","getDevices","devices","device_name","getFieldValues","result","toString"],"mappings":"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","file":"datasource.js","sourcesContent":["import {metricList, unitList, filterFieldList} from './metric_def';\nimport _ from 'lodash';\nimport TableModel from 'app/core/table_model';\nimport './kentikProxy';\n\nclass KentikDatasource {\n\n  constructor(instanceSettings, templateSrv, kentikProxySrv)  {\n    this.instanceSettings = instanceSettings;\n    this.name = instanceSettings.name;\n    this.templateSrv = templateSrv;\n    this.kentik = kentikProxySrv;\n  }\n\n  interpolateDeviceField(value, variable) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return value.join(',');\n  }\n\n  convertToKentikFilter(filterObj) {\n    // Use Kentik 'not equal' style\n    if (filterObj.operator === '!=') {\n      filterObj.operator = '<>';\n    }\n\n    return {\n      filterField: _.find(filterFieldList, {text: filterObj.key}).field,\n      operator: filterObj.operator,\n      filterValue: filterObj.value\n    };\n  }\n\n  convertToKentikFilterGroup(filters) {\n    if (filters.length) {\n      let kentikFilters = _.map(filters, this.convertToKentikFilter);\n      let connector = 'All';\n      if (filters[0].condition && (\n          filters[0].condition.toLowerCase() === 'or' ||\n          filters[0].condition.toLowerCase() === 'any')) {\n        connector = 'Any';\n      }\n      return [{\n        \"connector\": connector,\n        \"filters\": kentikFilters,\n        \"filterString\": \"\",\n        \"metric\": null,\n        \"not\": false,\n        \"id\": \"c255\"\n      }];\n    } else {\n      return [];\n    }\n  }\n\n  query(options) {\n    if (!options.targets || options.targets.length === 0) {\n      return Promise.resolve({data: []});\n    }\n\n    let target = options.targets[0];\n    let deviceNames = this.templateSrv.replace(target.device, options.scopedVars, this.interpolateDeviceField.bind(this));\n\n    let kentikFilters = this.templateSrv.getAdhocFilters(this.name);\n    kentikFilters = this.convertToKentikFilterGroup(kentikFilters);\n\n    let query_options = {\n      deviceNames: deviceNames,\n      range: {\n        from: options.range.from,\n        to: options.range.to\n      },\n      metric: this.templateSrv.replace(target.metric),\n      unit: this.templateSrv.replace(target.unit),\n      kentikFilterGroups: kentikFilters\n    };\n    let query = this.kentik.formatQuery(query_options);\n\n    return this.kentik.invokeQuery(query)\n    .then(this.processResponse.bind(this, query, target.mode, options));\n  }\n\n  processResponse(query, mode, options, data) {\n    if (!data.results) {\n      return Promise.reject({message: 'no kentik data'});\n    }\n\n    var bucketData = data.results[0].data;\n    if (bucketData.length === 0) {\n      return [];\n    }\n\n    var metricDef = _.find(metricList, {value: query.dimension[0]});\n    var unitDef = _.find(unitList, {value: query.metric});\n\n    if (mode === 'table') {\n      return this.processTableData(bucketData, metricDef, unitDef);\n    } else {\n      return this.processTimeSeries(bucketData, query, options);\n    }\n  }\n\n  processTimeSeries(bucketData, query) {\n    let seriesList = [];\n    let endIndex = query.topx;\n    if (bucketData.length < endIndex) {\n      endIndex = bucketData.length;\n    }\n\n    for (let i = 0; i < endIndex; i++) {\n      let series = bucketData[i];\n      let timeseries = _.find(series.timeSeries, series => {\n        return series.flow && series.flow.length;\n      });\n      let seriesName = series.key;\n\n      if (timeseries) {\n        let grafana_series = {\n          target: seriesName,\n          datapoints: timeseries.flow.map(point => {\n            return [point[1], point[0]];\n          })\n        };\n        seriesList.push(grafana_series);\n      }\n    }\n\n    return { data: seriesList };\n  }\n\n  processTableData(bucketData, metricDef, unitDef) {\n    var table = new TableModel();\n\n    table.columns.push({text: metricDef.text});\n\n    for (let col of unitDef.tableFields) {\n      table.columns.push({text: col.text, unit: col.unit});\n    }\n\n    bucketData.forEach(row => {\n      var seriesName = row.key;\n\n      var values = [seriesName];\n      for (let col of unitDef.tableFields) {\n        var val = row[col.field];\n\n        if (_.isString(val)) {\n          val = parseFloat(val);\n        }\n\n        values.push(val);\n      }\n\n      table.rows.push(values);\n    });\n\n    return {data: [table]};\n  }\n\n  metricFindQuery(query) {\n    if (query === 'metrics()') {\n      return Promise.resolve(metricList);\n    }\n    if (query === 'units()') {\n      return Promise.resolve(unitList);\n    }\n\n    return this.kentik.getDevices()\n    .then(devices => {\n      return devices.map(device => {\n        return {text: device.device_name, value: device.device_name};\n      });\n    });\n  }\n\n  getTagKeys() {\n    return Promise.resolve(filterFieldList);\n  }\n\n  getTagValues(options) {\n    if (options) {\n      let field = _.find(filterFieldList, {text: options.key}).field;\n      return this.kentik.getFieldValues(field)\n      .then(result => {\n        return result.rows.map(row => {\n          return {text: row[field].toString()};\n        });\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n}\n\nexport {KentikDatasource};\n"]}