{"version":3,"sources":["../../src/datasource/kentikAPI.js"],"names":["angular","KentikAPI","backendSrv","baseUrl","_get","then","response","data","devices","field","query","invokeSQLQuery","kentik_v5_query","_post","url","datasourceRequest","method","module","service"],"mappings":";;;;;;;;;;;;;;;AAAOA,a;;;;;;;;;;;;;;;;;;;;;AAEDC,e;;AAEJ;AACA,2BAAYC,UAAZ,EAAwB;AAAA;;AACtB,eAAKA,UAAL,GAAkBA,UAAlB;AACA,eAAKC,OAAL,GAAe,6BAAf;AACD;;;;uCAEY;AACX,mBAAO,KAAKC,IAAL,CAAU,iBAAV,EACNC,IADM,CACD,oBAAY;AAChB,kBAAIC,SAASC,IAAT,IAAiBD,SAASC,IAAT,CAAcC,OAAnC,EAA4C;AAC1C,uBAAOF,SAASC,IAAT,CAAcC,OAArB;AACD,eAFD,MAEO;AACL,uBAAO,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;yCAEcC,K,EAAO;AACpB,gBAAIC,6BAA2BD,KAA3B,mCAA8DA,KAA9D,SAAJ;AACA,mBAAO,KAAKE,cAAL,CAAoBD,KAApB,CAAP;AACD;;;8CAEmBA,K,EAAO;AACzB,gBAAIE,kBAAkB;AACpB,yBAAW,CACT,EAAE,SAASF,KAAX,EAAkB,eAAe,CAAjC,EADS;AADS,aAAtB;;AAMA,mBAAO,KAAKG,KAAL,CAAW,wBAAX,EAAqCD,eAArC,CAAP;AACD;;;yCAEcF,K,EAAO;AACpB,gBAAIH,OAAO;AACT,uBAASG;AADA,aAAX;;AAIA,mBAAO,KAAKG,KAAL,CAAW,mBAAX,EAAgCN,IAAhC,CAAP;AACD;;;+BAEIO,G,EAAK;AACR,mBAAO,KAAKZ,UAAL,CAAgBa,iBAAhB,CAAkC;AACvCC,sBAAQ,KAD+B;AAEvCF,mBAAK,KAAKX,OAAL,GAAeW;AAFmB,aAAlC,CAAP;AAID;;;gCAEKA,G,EAAKP,I,EAAM;AACf,mBAAO,KAAKL,UAAL,CAAgBa,iBAAhB,CAAkC;AACvCC,sBAAQ,MAD+B;AAEvCF,mBAAK,KAAKX,OAAL,GAAeW,GAFmB;AAGvCP,oBAAMA;AAHiC,aAAlC,EAKNF,IALM,CAKD,oBAAY;AAChB,kBAAIC,SAASC,IAAb,EAAmB;AACjB,uBAAOD,SAASC,IAAhB;AACD,eAFD,MAEO;AACL,uBAAO,EAAP;AACD;AACF,aAXM,CAAP;AAYD;;;;;;AAGHP,cACGiB,MADH,CACU,kBADV,EAEGC,OAFH,CAEW,cAFX,EAE2BjB,SAF3B","file":"kentikAPI.js","sourcesContent":["import angular from 'angular';\n\nclass KentikAPI {\n\n  /** @ngInject */\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n    this.baseUrl = 'api/plugin-proxy/kentik-app';\n  }\n\n  getDevices() {\n    return this._get('/api/v5/devices')\n    .then(response => {\n      if (response.data && response.data.devices) {\n        return response.data.devices;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  getFieldValues(field) {\n    let query = `SELECT DISTINCT ${field} FROM all_devices ORDER BY ${field} ASC`;\n    return this.invokeSQLQuery(query);\n  }\n\n  invokeTopXDataQuery(query) {\n    let kentik_v5_query = {\n      \"queries\": [\n        { \"query\": query, \"bucketIndex\": 0 }\n      ]\n    };\n\n    return this._post('/api/v5/query/topXdata', kentik_v5_query);\n  }\n\n  invokeSQLQuery(query) {\n    let data = {\n      \"query\": query\n    };\n\n    return this._post('/api/v5/query/sql', data);\n  }\n\n  _get(url) {\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.baseUrl + url,\n    });\n  }\n\n  _post(url, data) {\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: this.baseUrl + url,\n      data: data\n    })\n    .then(response => {\n      if (response.data) {\n        return response.data;\n      } else {\n        return [];\n      }\n    });\n  }\n}\n\nangular\n  .module('grafana.services')\n  .service('kentikAPISrv', KentikAPI);\n"]}