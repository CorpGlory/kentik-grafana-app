{"version":3,"sources":["../../src/datasource/kentikAPI.js"],"names":["angular","_","unitList","KentikAPI","backendSrv","baseUrl","_get","then","response","data","devices","options","unitDef","find","value","unit","query","metric","starting_time","range","from","utc","format","ending_time","to","deviceNames","field","aggs","queries","aggregates","push","kentikFilterGroups","length","filters_obj","invokeSQLQuery","_post","url","datasourceRequest","method","module","service"],"mappings":"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","file":"kentikAPI.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {unitList} from './metric_def';\n\nclass KentikAPI {\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n    this.baseUrl = 'api/plugin-proxy/kentik-app';\n  }\n\n  getDevices() {\n    return this._get('/api/v5/devices')\n    .then(response => {\n      if (response.data && response.data.devices) {\n        return response.data.devices;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  formatQuery(options) {\n    var unitDef = _.find(unitList, {value: options.unit});\n    let query = {\n      \"queries\": [\n        {\n          \"query\": {\n            \"dimension\": [\n              options.metric\n            ],\n            \"metric\": options.unit,\n            \"matrixBy\": [],\n            \"cidr\": 32,\n            \"cidr6\": 128,\n            \"topx\": 8, // Visualization depth (8 by default)\n            \"depth\": 100,\n            \"fastData\": \"Auto\",\n            \"lookback_seconds\": 0,\n            \"time_format\": \"UTC\",\n            starting_time: options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n            ending_time: options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n            \"device_name\": options.deviceNames,\n            \"bucket\": \"\",\n            \"bucketIndex\": -1,\n            \"outsort\": unitDef.field,\n            \"aggregates\": [],\n            \"filter_string\": \"\",\n            \"filters_obj\": {}\n          },\n          \"bucketIndex\": 0,\n          \"isOverlay\": false\n        }\n      ]\n    };\n\n    // Add aggregates\n    let aggs = [];\n    if (unitDef.field === \"f_countdistinct_ipv4_src_addr\" ||\n        unitDef.field === \"f_countdistinct_ipv4_dst_addr\") {\n      aggs = [\n      {\n        \"name\": unitDef.field,\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_bits_per_sec\",\n        \"column\": \"f_sum_both_bytes\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_pkts_per_sec\",\n        \"column\": \"f_sum_both_pkts\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      }];\n    } else {\n      aggs = [\n      {\n        \"name\": unitDef.field, // avg_bits_per_sec\n        \"column\": unitDef.field,\n        \"fn\": \"average\",\n        \"properName\": \"Average\",\n        \"raw\": true, // Set to get timeseries data\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"properName\": \"95th Percentile\",\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"max_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      }];\n    }\n    query.queries[0].query.aggregates.push(...aggs);\n\n    // Add filters\n    if (options.kentikFilterGroups.length) {\n      query.queries[0].query.filters_obj = {\n        \"connector\": \"All\",\n        \"custom\": false,\n        \"filterGroups\": options.kentikFilterGroups,\n        \"filterString\": \"\"\n      };\n    }\n\n    return query;\n  }\n\n  getFieldValues(field) {\n    let query = `SELECT DISTINCT ${field} FROM all_devices ORDER BY ${field} ASC`;\n    return this.invokeSQLQuery(query);\n  }\n\n  invokeQuery(query) {\n    return this._post('/api/v5/query/topXdata', query);\n  }\n\n  invokeSQLQuery(query) {\n    let data = {\n      \"query\": query\n    };\n\n    return this._post('/api/v5/query/sql', data);\n  }\n\n  _get(url) {\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.baseUrl + url,\n    });\n  }\n\n  _post(url, data) {\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: this.baseUrl + url,\n      data: data\n    })\n    .then(response => {\n      if (response.data) {\n        return response.data;\n      } else {\n        return [];\n      }\n    });\n  }\n}\n\nangular\n  .module('grafana.services')\n  .service('kentikAPISrv', KentikAPI);\n"]}