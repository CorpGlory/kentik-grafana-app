{"version":3,"sources":["../../src/datasource/kentikAPI.js"],"names":["angular","_","unitList","KentikAPI","backendSrv","baseUrl","_get","then","response","data","devices","options","query","version","device_name","deviceNames","time_type","lookback_seconds","starting_time","range","from","utc","format","ending_time","to","metric","fast_data","units","unit","filterSettings","connector","filterString","filterGroups","filters","kentikFilters","endpoint","_post","unitDef","find","value","field","aggs","queries","aggregates","push","length","filters_obj","url","datasourceRequest","method","module","service"],"mappings":"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","file":"kentikAPI.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {unitList} from './metric_def';\n\nclass KentikAPI {\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n    this.baseUrl = 'api/plugin-proxy/kentik-app';\n  }\n\n  getDevices() {\n    return this._get('/api/v5/devices')\n    .then(response => {\n      if (response.data && response.data.devices) {\n        return response.data.devices;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  formatV4Query(options) {\n    let query = {\n      version: \"2.01\",\n      query: {\n        device_name: options.deviceNames,\n        time_type: 'fixed', // or fixed\n        lookback_seconds: 3600,\n        starting_time: options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        ending_time: options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        metric: options.metric,\n        fast_data: \"Auto\", // or Fast or Full\n        units: options.unit\n      },\n      filterSettings: {\n        connector: 'All',\n        filterString: '',\n        filterGroups: [\n          {\n            connector: 'All',\n            filterString: \"\",\n            filters: options.kentikFilters\n          }\n        ]\n      }\n    };\n    return query;\n  }\n\n  invokeQuery(query, endpoint = 'timeSeriesData') {\n    return this._post('/api/v4/dataExplorer/' + endpoint, query);\n  }\n\n  formatV5Query(options) {\n    var unitDef = _.find(unitList, {value: options.unit});\n    let query = {\n      \"queries\": [\n        {\n          \"query\": {\n            \"dimension\": [\n              options.metric\n            ],\n            \"metric\": options.unit,\n            \"matrixBy\": [],\n            \"cidr\": 32,\n            \"cidr6\": 128,\n            \"topx\": 8, // Visualization depth (8 by default)\n            \"depth\": 100,\n            \"fastData\": \"Auto\",\n            \"lookback_seconds\": 0,\n            \"time_format\": \"UTC\",\n            starting_time: options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n            ending_time: options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n            \"device_name\": options.deviceNames,\n            \"bucket\": \"\",\n            \"bucketIndex\": -1,\n            \"outsort\": unitDef.field,\n            \"aggregates\": [],\n            \"filter_string\": \"\",\n            \"filters_obj\": {},\n            // \"query_title\": \"Top Dest AS Number by Max Bits/s\",\n            // \"viz_type\": \"stackedArea\",\n            // \"update_frequency\": 0,\n            // \"show_overlay\": true,\n            // \"overlay_day\": -7,\n            // \"sync_axes\": false,\n            // \"pps_threshold\": 500,\n            // \"all_selected\": false,\n            // \"host_selected\": false,\n            // \"num_device\": 1,\n            // \"saved_filters\": [],\n            // \"descriptor\": \"Total\",\n            // \"isEditing\": false,\n          },\n          // \"bucket\": \"Left +Y Axis\",\n          \"bucketIndex\": 0,\n          \"isOverlay\": false\n        }\n      ]\n    };\n\n    // Add aggregates\n    let aggs = [];\n    if (unitDef.field === \"f_countdistinct_ipv4_src_addr\" ||\n        unitDef.field === \"f_countdistinct_ipv4_dst_addr\") {\n      aggs = [\n      {\n        \"name\": unitDef.field,\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_bits_per_sec\",\n        \"column\": \"f_sum_both_bytes\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_pkts_per_sec\",\n        \"column\": \"f_sum_both_pkts\",\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"sample_rate\": 1\n      }];\n    } else {\n      aggs = [\n      {\n        \"name\": unitDef.field, // avg_bits_per_sec\n        \"column\": unitDef.field,\n        \"fn\": \"average\",\n        \"properName\": \"Average\",\n        \"raw\": true, // Set to get timeseries data\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"p95th_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"percentile\",\n        \"rank\": 95,\n        \"properName\": \"95th Percentile\",\n        \"sortable\": true,\n        \"sample_rate\": 1\n      },\n      {\n        \"name\": \"max_both\",\n        \"column\": unitDef.field,\n        \"fn\": \"max\",\n        \"properName\": \"Max\",\n        \"sortable\": true,\n        \"raw\": true,\n        \"sample_rate\": 1\n      }];\n    }\n    query.queries[0].query.aggregates.push(...aggs);\n\n    // Add filters\n    if (options.kentikFilters.length) {\n      query.queries[0].query.filters_obj = {\n        \"connector\": \"All\",\n        \"custom\": false,\n        \"filterGroups\": [\n          {\n            \"connector\": \"All\",\n            \"filters\": options.kentikFilters,\n            \"filterString\": \"\",\n            \"metric\": null,\n            \"not\": false,\n            \"id\": \"c255\"\n          }\n        ],\n        \"filterString\": \"\"\n      };\n    }\n\n    return query;\n  }\n\n  invokeV5Query(query, endpoint = 'topXdata') {\n    return this._post('/api/v5/query/' + endpoint, query);\n  }\n\n  _get(url) {\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.baseUrl + url,\n    });\n  }\n\n  _post(url, data) {\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: this.baseUrl + url,\n      data: data\n    });\n  }\n}\n\nangular\n  .module('grafana.services')\n  .service('kentikAPISrv', KentikAPI);\n"]}