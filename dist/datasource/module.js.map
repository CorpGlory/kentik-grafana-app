{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"app/plugins/sdk\"","webpack:///external \"angular\"","webpack:///external \"moment\"","webpack:///external \"app/core/table_model\"","webpack:///./datasource/metric_def.ts","webpack:///./datasource/kentikAPI.ts","webpack:///./datasource/kentikProxy.ts","webpack:///./datasource/query_builder.ts","webpack:///./datasource/datasource.ts","webpack:///./datasource/config.ts","webpack:///./datasource/query_editor.ts","webpack:///./datasource/module.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__9__","metricList","text","field","unitList","outsort","gfUnit","gfAxisLabel","transform","row","i_duration","tableFields","unit","rangeSeconds","gfAxislabel","filterFieldList","KentikAPI","backendSrv","this","baseUrl","$inject","getDevices","_get","then","response","data","devices","getFieldValues","query","invokeSQLQuery","invokeTopXDataQuery","kentik_v5_query","bucketIndex","_post","url","datasourceRequest","method","error","console","log","err","Promise","reject","getUTCTimestamp","ts","Date","getTime","getTimezoneOffset","getHash","queryObj","external_lodash_default","a","cloneDeep","starting_time","ending_time","JSON","stringify","kentikProxy_KentikProxy","KentikProxy","kentikAPISrv","kentikAPI","cache","cacheUpdateInterval","requestCachingIntervals","1d","_this","cached_query","hash","shouldInvoke","result","timestamp","resolve","kentik_query","parse","query_range","cache_starting_time","cache_ending_time","cached_query_range","max_refresh_interval","interval","external_moment_default","duration","getMaxRefreshInterval","Math","abs","KENTIK_TIME_FORMAT","formatAggs","unitDef","column","fn","raw","sample_rate","rank","formatUniqueIpAggs","formatMetricAggs","convertToKentikFilter","filterObj","operator","filterFieldDef","find","filterField","filterValue","query_builder","buildTopXdataQuery","options","range","from","utc","format","to","dimension","metric","matrixBy","cidr","cidr6","topx","depth","fastData","lookback_seconds","time_format","device_name","deviceNames","aggregates","filters_obj","kentikFilterGroups","connector","filterGroups","length","formatFilters","filters","kentikFilters","map","condition","toLowerCase","not","datasource_KentikDatasource","KentikDatasource","instanceSettings","templateSrv","kentikProxySrv","kentik","interpolateDeviceField","variable","multi","includeAll","join","targets","target","replace","device","scopedVars","getAdhocFilters","convertToKentikFilterGroup","query_options","processResponse","results","message","bucketData","metricDef","processTableData","processTimeSeries","seriesList","endIndex","series","timeseries","timeSeries","flow","seriesName","datapoints","point","push","grafana_series","table","table_model_default","columns","_i","_a","col","forEach","values","val","isString","parseFloat","rows","metricFindQuery","getTagKeys","getTagValues","field_1","toString","ConfigCtrl","templateUrl","b","__","KentikQueryCtrl","_super","$scope","$injector","__webpack_exports__"],"mappings":"qHACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,oBClFAhC,EAAAD,QAAAkC,iBCAAjC,EAAAD,QAAAmC,iBCAAlC,EAAAD,QAAAoC,sBCAAnC,EAAAD,QAAAqC,iBCAApC,EAAAD,QAAAsC,0CCAA,IAAIC,IACDC,KAAM,UAAWrB,MAAO,UAAWsB,MAAO,YAC1CD,KAAM,iBAAkBrB,MAAO,gBAAiBsB,MAAO,YACvDD,KAAM,oBAAqBrB,MAAO,iBAAkBsB,MAAO,mBAC3DD,KAAM,kBAAmBrB,MAAO,eAAgBsB,MAAO,iBACvDD,KAAM,mBAAoBrB,MAAO,SAAUsB,MAAO,WAClDD,KAAM,mBAAoBrB,MAAO,kBAAmBsB,MAAO,eAC3DD,KAAM,cAAerB,MAAO,WAAYsB,MAAO,gBAC/CD,KAAM,cAAerB,MAAO,WAAYsB,MAAO,YAC/CD,KAAM,iBAAkBrB,MAAO,SAAUsB,MAAO,kBAChDD,KAAM,0BAA2BrB,MAAO,uBAAwBsB,MAAO,yBACvED,KAAM,mBAAoBrB,MAAO,mBAAoBsB,MAAO,qBAC5DD,KAAM,uBAAwBrB,MAAO,oBAAqBsB,MAAO,sBACjED,KAAM,qBAAsBrB,MAAO,iBAAkBsB,MAAO,mBAC5DD,KAAM,8BAA+BrB,MAAO,iBAAkBsB,MAAO,sBACrED,KAAM,4BAA6BrB,MAAO,kBAAmBsB,MAAO,mBACpED,KAAM,+BAAgCrB,MAAO,iBAAkBsB,MAAO,mBACtED,KAAM,+BAAgCrB,MAAO,gBAAiBsB,MAAO,kBACrED,KAAM,0BAA2BrB,MAAO,iBAAkBsB,MAAO,mBACjED,KAAM,sBAAuBrB,MAAO,gBAAiBsB,MAAO,YAC5DD,KAAM,qBAAsBrB,MAAO,iBAAkBsB,MAAO,mBAC5DD,KAAM,mBAAoBrB,MAAO,eAAgBsB,MAAO,iBACxDD,KAAM,wBAAyBrB,MAAO,SAAUsB,MAAO,WACvDD,KAAM,wBAAyBrB,MAAO,kBAAmBsB,MAAO,gBAChED,KAAM,mBAAoBrB,MAAO,WAAYsB,MAAO,gBACpDD,KAAM,mBAAoBrB,MAAO,WAAYsB,MAAO,aACpDD,KAAM,sBAAuBrB,MAAO,SAAUsB,MAAO,kBACrDD,KAAM,+BAAgCrB,MAAO,uBAAwBsB,MAAO,yBAC5ED,KAAM,wBAAyBrB,MAAO,uBAAwBsB,MAAO,qBACrED,KAAM,4BAA6BrB,MAAO,oBAAqBsB,MAAO,sBACtED,KAAM,0BAA2BrB,MAAO,iBAAkBsB,MAAO,mBACjED,KAAM,mCAAoCrB,MAAO,iBAAkBsB,MAAO,sBAC1ED,KAAM,iCAAkCrB,MAAO,kBAAmBsB,MAAO,mBACzED,KAAM,oCAAqCrB,MAAO,iBAAkBsB,MAAO,mBAC3ED,KAAM,oCAAqCrB,MAAO,gBAAiBsB,MAAO,kBAC1ED,KAAM,+BAAgCrB,MAAO,iBAAkBsB,MAAO,mBACtED,KAAM,WAAYrB,MAAO,MAAOsB,MAAO,QACvCD,KAAM,gBAAiBrB,MAAO,QAASsB,MAAO,YAmBjD,IAAIC,IAEAF,KAAM,SACNrB,MAAO,QACPsB,MAAO,mBACPE,QAAS,WACTC,OAAQ,MACRC,YAAa,SACbC,UAxBJ,SAAyB3B,EAAO4B,GAC9B,OAAgB,EAAR5B,EAAa4B,EAAIC,YAwBvBC,cACGT,KAAM,MAAOC,MAAO,WAAYS,KAAM,MAAOJ,UAdpD,SAA8B3B,EAAO4B,EAAKI,GACxC,OAAgB,EAARhC,EAAagC,KAchBX,KAAM,kBAAmBC,MAAO,aAAcS,KAAM,QACpDV,KAAM,MAAOC,MAAO,WAAYS,KAAM,UAIzCV,KAAM,YACNrB,MAAO,UACPsB,MAAO,kBACPE,QAAS,WACTC,OAAQ,MACRQ,YAAa,YACbN,UAlCJ,SAAyB3B,EAAO4B,GAC9B,OAAO5B,EAAQ4B,EAAIC,YAkCjBC,cACGT,KAAM,MAAOC,MAAO,WAAYS,KAAM,MAAOJ,UAhCpD,SAA6B3B,EAAO4B,EAAKI,GACvC,OAAOhC,EAAQgC,KAgCVX,KAAM,kBAAmBC,MAAO,aAAcS,KAAM,QACpDV,KAAM,MAAOC,MAAO,WAAYS,KAAM,UAIzCV,KAAM,iBACNrB,MAAO,gBACPsB,MAAO,8BACPE,QAAS,UACTC,OAAQ,QACRC,YAAa,iBACbI,cACGT,KAAM,UAAWC,MAAO,UAAWS,KAAM,SACzCV,KAAM,QAASC,MAAO,YAAaS,KAAM,SACzCV,KAAM,MAAOC,MAAO,UAAWS,KAAM,SACrCV,KAAM,aAAcC,MAAO,qBAAsBS,KAAM,QACvDV,KAAM,YAAaC,MAAO,qBAAsBS,KAAM,UAIzDV,KAAM,iBACNrB,MAAO,gBACPsB,MAAO,8BACPE,QAAS,UACTC,OAAQ,QACRC,YAAa,iBACbI,cACGT,KAAM,UAAWC,MAAO,UAAWS,KAAM,SACzCV,KAAM,QAASC,MAAO,YAAaS,KAAM,SACzCV,KAAM,MAAOC,MAAO,UAAWS,KAAM,SACrCV,KAAM,aAAcC,MAAO,qBAAsBS,KAAM,QACvDV,KAAM,YAAaC,MAAO,qBAAsBS,KAAM,UAKzDG,IACDb,KAAM,cAAeC,MAAO,iBAC5BD,KAAM,gBAAiBC,MAAO,mBAC9BD,KAAM,iBAAkBC,MAAO,YAC/BD,KAAM,mBAAoBC,MAAO,WACjCD,KAAM,iBAAkBC,MAAO,gBAC/BD,KAAM,kBAAmBC,MAAO,kBAChCD,KAAM,iBAAkBC,MAAO,gBAC/BD,KAAM,qBAAsBC,MAAO,gBACnCD,KAAM,cAAeC,MAAO,YAC5BD,KAAM,oBAAqBC,MAAO,kBAClCD,KAAM,sBAAuBC,MAAO,eACpCD,KAAM,wBAAyBC,MAAO,kCACtCD,KAAM,+BAAgCC,MAAO,uBAC7CD,KAAM,sBAAuBC,MAAO,0BACpCD,KAAM,mBAAoBC,MAAO,qBACjCD,KAAM,qBAAsBC,MAAO,mBACnCD,KAAM,uBAAwBC,MAAO,sBACrCD,KAAM,0BAA2BC,MAAO,sBACxCD,KAAM,4BAA6BC,MAAO,mBAC1CD,KAAM,0BAA2BC,MAAO,wBACxCD,KAAM,+BAAgCC,MAAO,mBAC7CD,KAAM,6BAA8BC,MAAO,wBAC3CD,KAAM,+BAAgCC,MAAO,kBAC7CD,KAAM,6BAA8BC,MAAO,uBAC3CD,KAAM,mBAAoBC,MAAO,iBACjCD,KAAM,qBAAsBC,MAAO,mBACnCD,KAAM,sBAAuBC,MAAO,YACpCD,KAAM,wBAAyBC,MAAO,WACtCD,KAAM,sBAAuBC,MAAO,gBACpCD,KAAM,uBAAwBC,MAAO,kBACrCD,KAAM,sBAAuBC,MAAO,gBACpCD,KAAM,0BAA2BC,MAAO,gBACxCD,KAAM,mBAAoBC,MAAO,aACjCD,KAAM,yBAA0BC,MAAO,kBACvCD,KAAM,2BAA4BC,MAAO,gBACzCD,KAAM,6BAA8BC,MAAO,mCAC3CD,KAAM,oCAAqCC,MAAO,wBAClDD,KAAM,2BAA4BC,MAAO,0BACzCD,KAAM,wBAAyBC,MAAO,qBACtCD,KAAM,0BAA2BC,MAAO,mBACxCD,KAAM,4BAA6BC,MAAO,sBAC1CD,KAAM,+BAAgCC,MAAO,sBAC7CD,KAAM,iCAAkCC,MAAO,mBAC/CD,KAAM,+BAAgCC,MAAO,wBAC7CD,KAAM,oCAAqCC,MAAO,mBAClDD,KAAM,kCAAmCC,MAAO,wBAChDD,KAAM,oCAAqCC,MAAO,kBAClDD,KAAM,kCAAmCC,MAAO,uBAChDD,KAAM,YAAaC,MAAO,cAC1BD,KAAM,kBAAmBC,MAAO,kBAChCD,KAAM,WAAYC,MAAO,aAEzBD,KAAM,cAAeC,MAAO,gBAC5BD,KAAM,cAAeC,MAAO,kBAC5BD,KAAM,kBAAmBC,MAAO,mBAChCD,KAAM,eAAgBC,MAAO,QAC7BD,KAAM,qCAAsCC,MAAO,cACnDD,KAAM,sCAAuCC,MAAO,YACpDD,KAAM,oCAAqCC,MAAO,aAClDD,KAAM,uCAAwCC,MAAO,aACrDD,KAAM,qCAAsCC,MAAO,8DChLtDa,EAAA,oBAIqBA,EAAUC,GAC3BC,KAAKD,WAAUA,EAChBC,KAAAC,QAAA,8BAuEF,OAzECH,EAAAI,SAAmB,gBAKjB5B,UAAgB6B,WAAC,kBAChBH,KAAKI,KAAA,mBACJC,KAAI,SAASC,UACXA,EAAOC,MAASD,EAAKC,KAAQC,QAC9BF,EAAAC,KAAAC,gBAOClC,UAAQmC,eAAmB,SAAKxB,GACpC,IAAAyB,EAAY,mBAAqBzB,EAAC,8BAAAA,EAAA,OACnC,OAAAe,KAAAW,eAAAD,MAGKpC,UAAAsC,oBAAkB,SAAAF,OACpBG,aAECH,QAAAI,YAAA,KAIJ,OAAAd,KAAAe,MAAA,yBAAAF,MAGKvC,UAAOqC,eAAA,SAAAD,OACTH,GACAG,SAGH,OAAAV,KAAAe,MAAA,oBAAAR,MAGCjC,UAAY8B,KAAW,SAAAY,UACrBhB,KAAQD,WAAKkB,mBACbC,OAAK,MACJF,IAAMhB,KAAAC,QAAKe,UACZ,SAAYG,UACZC,QAAIC,IAAMF,GACRA,EAAAG,IACDC,QAAAC,OAAAL,EAAAG,KAEAC,QAAAC,OAAAL,QAKH7C,UAAYyC,MAAW,SAAAC,EAAAT,UACrBP,KAAQD,WAAMkB,mBACdC,OAAK,OACLF,IAAIhB,KAAMC,QAAAe,EACVT,SAEAF,KAAI,SAASC,UACXA,EAAOC,KACRD,EAAAC,gBAID,SAAYY,UACZC,QAAIC,IAAMF,GACRA,EAAAG,IACDC,QAAAC,OAAAL,EAAAG,KAEAC,QAAAC,OAAAL,MAGNrB,EA7ED,YCIM2B,IACJ,IAAAC,EAAS,IAACC,KACX,OAAAD,EAAAE,UAAA,GAAAF,EAAAG,oBAAA,aAIKC,EAAQC,GACZ,IAAArB,EAAMsB,EAAqBC,EAAAC,UAAAH,GAG5B,OAFCrB,EAAMyB,cAAc,KACpBzB,EAAA0B,YAAY,KACbC,KAAAC,UAAA5B,KDkESuB,EACPxF,OAAO,kDC9CR8F,EAAgB,oBAGTC,EAAWzC,EAAA0C,GAChBzC,KAAK0C,UAAAD,EACLzC,KAAK2C,cACHC,oBAAO,SACPC,yBAEEC,KAAC,GAGP9C,KAAAG,WAAAH,KAAA0C,UAAAvC,WAAAjC,KAAA8B,KAAoB0C,WAuEtB,SAjFSxC,SAAY,aAAa,kBAW1B5B,UAAYsC,oBAAG,SAAEF,GACrB,IAAIqC,EAAO/C,KAEPgD,EAAKhB,EAAqBC,EAAAC,UAAAxB,GAC5BuC,EAAAnB,EAAekB,UACfhD,KAAAkD,aAAYxC,GAEVV,KAAI0C,UAAY9B,oBAAkBF,GAElCL,KAAK,SAAU8C,OACbC,EAAW3B,IAOhB,SANKkB,MAAOM,IACPG,UAAQA,EACR1C,MAAAsC,EACFG,OAAYA,GAEX/B,QAAAC,IAAA,uBACJ8B,KAIA/B,QAAAC,IAAA,yBACFE,QAAA8B,QAAArD,KAAA2C,MAAAM,GAAAE,YAKS7E,UAAU4E,aAAe,SAAAxC,GACjC,IAAI4C,EAAY5C,EAEZuC,EAAAnB,EAAawB,GACbF,EAAW3B,IACXU,EAAcR,KAAA4B,MAAWD,EAAGnB,eAE5BC,EAAAT,KAAmB4B,MAAGD,EAAgBlB,aACtCoB,EAAApB,EAAyBD,EACzBsB,EAAqBzD,KAAA2C,MAAAM,GAAoBtB,KAAA4B,MAAAvD,KAAA2C,MAAoBM,GAAAvC,MAAAyB,eAAA,KAE7DuB,EAAoB1D,KAAG2C,MAAAM,GAAAtB,KAAqB4B,MAACvD,KAAA2C,MAAcM,GAAAvC,MAAA0B,aAAA,KAE/DuB,EACmBD,EAAAD,EACjBG,WAxE2BlD,GAC/B,IAAImD,EAAWlC,KAAA4B,MAAA7C,EAAA0B,aAAOT,KAAU4B,MAAE7C,EAAWyB,sBAC3C0B,EAASC,EAAuB7B,EAAA8B,SAAA,YACjC,KACCF,EAAcC,EAAkB7B,EAAA8B,SAAA,SACjC,IAEA,IAiE0BC,CAAGV,UACrBtD,KAAC2C,MAAUM,MAEdb,EAAgBwB,QAChBjB,MAAQM,KAACG,EAAcM,EAA2BE,GAEpDzB,EAAAsB,GACHQ,KAAAC,IAAAV,EAAAG,GAAA,QAGOrF,UAAGmC,eAAkB,SAAAxB,GAC3B,IAAI8D,EAAK/C,KACP0B,EAAAD,WACDzB,KAAA2C,MAAA1D,IAAAyC,EAAA1B,KAAA2C,MAAA1D,GAAAyC,GAAA1B,KAAA4C,oBAAMrB,QAAA8B,QAAArD,KAAA2C,MAAA1D,GAAAtB,OAGDqC,KAAG0C,UAAAjC,eAAkBxB,GACvBoB,KAAK,SAAM8C,GAOd,SANK1B,MACAkB,MAAO1D,IACPyC,KAEF/D,MAAOwF,GAEVA,KAILX,EAnFkB,KAqFPP,6ECpHTkC,EAAW,+BAsEPC,EAAQC,GAUd,MARW,kBAAPA,EAAO1G,OACR,kBAAA0G,EAAA1G,eA7CC0G,GAwCJ,QArCMpH,KAAM,UACNqH,OAAOD,EAAIpF,MACXsF,GAAA,UACDC,KAAA,EACDC,YAAA,IAGExH,KAAM,YACNqH,OAAUD,EAAApF,MACVsF,GAAA,aACDG,KAAA,GACDD,YAAA,IAGExH,KAAM,UACNqH,OAAAD,EAAgBpF,MAChBsF,GAAK,MACNE,YAAA,EACDD,KAAA,IAGEvH,KAAM,qBACNqH,OAAU,mBACVC,GAAA,aACDG,KAAA,GACDD,YAAA,IAGExH,KAAM,qBACNqH,OAAU,kBACVC,GAAA,aACDG,KAAA,GACDD,YAAA,IAUKE,CAAAN,YAxELA,GAyBJ,QAtBMpH,KAAM,WACNqH,OAAOD,EAAIpF,MACXsF,GAAA,UACDC,KAAA,EACDC,YAAA,IAGExH,KAAM,aACNqH,OAAUD,EAAApF,MACVsF,GAAA,aACDG,KAAA,GACDD,YAAA,IAGExH,KAAM,WACNqH,OAAAD,EAAgBpF,MACjBsF,GAAA,MACDE,YAAA,IAwDSG,CAACP,YA6CRQ,EAAuBC,GAE1B,OAAAA,EAAAC,WAEDD,EAAAC,SAAA,UAIEC,EAAchD,EAAqBC,EAAAgD,KAAApF,GAAAb,KAAA8F,EAAA7G,aAQnCiH,YAPDF,EAAMA,EAAA/F,MAIA6F,EAAA7G,IAIL8G,SAAAD,EAAAC,SACHI,YAAAL,EAAAnH,OAuBuB,IAAAyH,GACtBC,4BArEoBC,GACpB,IAAIjB,EAAArC,EAAkCC,EAAEgD,KAAC/F,GAAOvB,MAAA2H,EAAoB5F,OAEhEyC,EAAQmD,EAAAC,MAAAC,KAAAC,MAAAC,OAAAvB,GACV/B,EAAckD,EAAQC,MAAMI,GAACF,MAAAC,OAAAvB,GAqBjC,OAnBIyB,WAAcN,EAAAO,QACdA,OAAUP,EAAA5F,KACVoG,YACAC,KAAQ,GACRC,MAAS,IACTC,KAAA,IACAC,MAAA,IACAC,SAAA,OACAC,iBAAiB,EACjBC,YAAe,MACflE,cAAeA,EACfC,YAAWA,EACXkE,YAAchB,EAAAiB,YACdpH,QAAAkF,EAAelF,QACfqH,WAAApC,EAAAC,GAEFoC,qBAnCeC,OACbD,GACAE,UAAA,MAEEC,iBAON,OALGF,EAAAG,SAEDJ,EAAOG,aAAYF,GAGZD,EAwBMK,CAAAxB,EAAAoB,sBAgDbtC,iDArBsB2C,MACpBA,EAAIF,OAAY,CAChB,IAAIG,EAAWhF,EACFC,EAAAgF,IAAUF,EAAAlC,GACrB8B,EAAW,aACXI,EAAA,GAASG,WAAS,OAAAH,EAAA,GAAAG,UAAAC,eACnB,QAAAJ,EAAA,GAAAG,UAAAC,gBACDR,EAAQ,SAGNA,UAAYA,EACXI,QAAAC,EACJI,KAAA,IAGF,WC1JCC,EAAiD,oBAC1CC,EAAOC,EAAsBC,EAAAC,GAClCzH,KAAKuH,iBAASA,EACfvH,KAAAwH,cAEDxH,KAAA/C,KAAAsK,EAAAtK,KACE+C,KAAA0H,OAAAD,WAN+CvH,SAAA,mBAAgB,kCAQtD5B,UAAMqJ,uBAAA,SAAAhK,EAAAiK,GAGf,OAAIA,EAAOC,OAAUD,EAAUE,WAIV,iBAAdnK,EACRA,EAGMA,EAAQoK,KAAA,KAPJpK,KASRW,UAAAoC,MAAA,SAAA4E,GAED,IAAIA,EAAS0C,SAAmB,IAAX1C,EAAW0C,QAAAnB,OAC5B,OAAAtF,QAAc8B,SAAK9C,UAGvB,IAAA0H,EAAa3C,EAAG0C,QAAY,GAExBzB,EAAavG,KAAGwH,YAAAU,QAAAD,EAAAE,OAAA7C,EAAA8C,WAAApI,KAAA2H,uBAAAzJ,KAAA8B,OAClBgH,EAAahH,KAAAwH,YAAWa,gBAAArI,KAAA/C,QACjBmI,EAAAkD,2BAAAtB,sBAEDT,SAENf,KAAQF,EAAKC,MAAWC,KACpBG,GAAEL,EAAKC,MAAWI,IAEtBE,OAAA7F,KAAAwH,YAAAU,QAAAD,EAAApC,QACEnG,KAAKM,KAAGwH,YAAaU,QAAAD,EAAAvI,MAEzBgH,mBAAmBM,KAEb5B,EAAMC,mBAAAkD,UACVvI,KAAO0H,OAAA9G,oBAAAF,QACLV,KAAMwI,gBAAMtK,KAAA8B,KAAAU,EAAAuH,EAAApK,KAAAyH,IACbjF,KAAC,SAAA8C,GACD,OACJ5C,KAAA4C,QAKE7E,UAAAkK,gBAAA,SAAA9H,EAAA7C,EAAAyH,EAAA/E,GAED,IAAIA,EAAAkI,QACA,OAAAlH,QAAWC,QAAYkH,QAAE,uBAE5BC,EAAApI,EAAAkI,QAAA,GAAAlI,KAED,GAAgB,IAAZoI,EAAS9B,OACT,aAGF+B,EAAY5G,EAAiBC,EAAAgD,KAAYlG,GAAWpB,MAAS+C,EAAAkF,UAAA,KAC9DvB,EAAArC,EAAAC,EAAAgD,KAAA/F,GAAAvB,MAAA+C,EAAAmF,eAAM,YACE7F,KAAK6I,iBAAiBF,EAAWC,EAASvE,GAIrDrE,KAAA8I,kBAAAH,EAAAjI,EAAkB4E,MAGZhH,UAAiBwK,kBAAa,SAAAH,EAAAjI,EAAA4E,OAChCyD,KACDC,EAAAtI,EAAAuF,KAED0C,EAAc9B,OAAMmC,IAClBA,EAAUL,EAAG9B,gBAEXnK,EAAA,EAAOA,EAAAsM,EAAetM,IAAA,CACxB,IAAGuM,EAAAN,EAAAjM,GACCwM,EAAalH,EAAWC,EAAAgD,KAAAgE,EAAAE,WAAA,SAAAF,GAExB,OAAAA,EAAYG,MAAAH,EAAAG,KAAAvC,WAEJoC,EAAAhL,SACR,QAEAgK,OAAEoB,EACFC,WAAAtH,EAAAC,EAAAgF,IAAAiC,EAAAE,KAAA,SAAAG,GACF,OAAgBA,EAAA,GAAAA,EAAgB,OAI7BR,EAAWS,KAAAC,IAIlB,OAAIV,KAIYzK,UAAAuK,iBAAmB,SAAnBF,EAAmBC,EAAEvE,OAAhCqF,EAAO,IAAAC,EAAA1H,IACV2H,QAAMJ,MAAQxK,KAAM4J,EAAU5J,WAC/B,IAAA6K,EAAA,EAAAC,EAAAzF,EAAA5E,YAAAoK,EAAAC,EAAAjD,OAAAgD,IAAA,CAED,IAAAE,EAAAD,EAAAD,GACEH,EAAIE,QAAUJ,MAAOxK,KAAI+K,EAAA/K,KAAAU,KAAAqK,EAAArK,OAoB3B,SAjBkBuC,EAAA+H,QAAQrB,EAAW,SAAnBpJ,WACd0K,GADU1K,EAAAtB,KAGN4L,EAAA,EAAAC,EAAAzF,EAAA5E,YAAWoK,EAAIC,EAAEjD,OAAAgD,IAAA,KAEpBK,EAAA3K,EADOuK,EAAAD,GACP5K,OAED+C,EAAiBC,EAAAkI,SAAAD,KAClBA,EAAAE,WAAAF,IAGAD,EAAAT,KAAAU,GAGJR,EAAAW,KAAAb,KAAAS,MAGKP,MAEHpL,UAAAgM,gBAAA,SAAA5J,GACD,MAAc,cAAVA,EACKa,QAAQ8B,QAAQtE,GAGb,YAAZ2B,EACMa,QAAA8B,QAAOnE,QAETwI,OAAQvH,aACTE,KAAE,SAAAG,GACF,OAAAA,EAAAyG,IAAA,SAAAkB,GACJ,OAAAnJ,KAAAmJ,EAAA7B,YAAA3I,MAAAwK,EAAA7B,kBAMDgB,EAAAhJ,UAAAiM,WAAY,WACV,OAAIhJ,QAAS8B,QAAAxD,MAEJvB,UAAYkM,aAAe,SAAMlF,QACnC,KACHmF,EAAOzI,EAAgBC,EAAGgD,KAAApF,GAAAb,KAAAsG,EAAArH,MAAAgB,kBACxByI,OAAQjH,eAAegK,GACxBpK,KAAE,SAAA8C,GACF,OAAAA,EAAAkH,KAAApD,IAAA,SAAA1H,GACJ,OAAAP,KAAAO,EAAAkL,GAAAC,gBAIL,OAAAnJ,QAAC8B,eAhKkD,GCV1CsH,EAAc,WACvB,SAAAA,YAFuBA,EAAAC,YAAA,2BACA,2QCD2B5N,EAAAsB,UAAA,OAAAuM,EAAAzN,OAAAY,OAAA6M,IAAAC,EAAAxM,UAAAuM,EAAAvM,UAAA,IAAAwM,OAOhDC,EAAoB,SAASC,YAMzBD,EAAeE,EAAQC,OACvBnI,EAAMiI,EAAEnO,KAASmD,KAAMiL,EAAQC,IAAAlL,KAKrC,SAJMiI,OAAApK,KAAAkF,EAAAkF,OAAApK,MAAA,uBACHF,MAAA,QAAAqB,KAAA,UACHrB,MAAA,QAACqB,KAAA,UAEc+D,WAZbgI,EACEC,KAIK9K,SAAa,wBALF,cCPpB6K,EAAAH,YAAA,+BACoCtO,EAAAU,EAAAmO,EAAA,+BAAA9D,IACW/K,EAAAU,EAAAmO,EAAA,+BAAAR,IAM7CrO,EAAAU,EAAAmO,EAAA,8BAAAJ","file":"datasource/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","var metricList = [\n  {text: 'Traffic', value: 'Traffic', field: 'traffic'},\n  {text: 'Source Country', value: 'Geography_src', field: 'src_geo'},\n  {text: 'Source Geo Region', value: 'src_geo_region', field: 'src_geo_region'},\n  {text: 'Source Geo City', value: 'src_geo_city', field: 'src_geo_city'},\n  {text: 'Source As Number', value: 'AS_src', field: 'src_as'},\n  {text: 'Source Interface', value: 'InterfaceID_src', field: 'input_port'},\n  {text: 'Source Port', value: 'Port_src', field: 'l4_src_port'},\n  {text: 'Source VLAN', value: 'VLAN_src', field: 'vlan_in'},\n  {text: 'Source IP/CIDR', value: 'IP_src', field: 'ipv4_src_addr'},\n  {text: 'Source Route Prefix/LEN', value: 'src_route_prefix_len', field: 'src_route_prefix_len'},\n  {text: 'Source Route LEN', value: 'src_route_length', field: 'src_route_length'},\n  {text: 'Source BGP Community', value: 'src_bgp_community', field: 'src_bgp_community'},\n  {text: 'Source BGP AS_Path', value: 'src_bgp_aspath', field: 'src_bgp_aspath'},\n  {text: 'Source BGP Next Hop IP/CIDR', value: 'src_nexthop_ip', field: 'ipv4_src_next_hop'},\n  {text: 'Source Next Hop AS Number', value: 'src_nexthop_asn', field: 'src_nexthop_as'},\n  {text: 'Source 2nd BGP_HOP AS Number', value: 'src_second_asn', field: 'src_second_asn'},\n  {text: 'Source 3nd BGP_HOP AS Number', value: 'src_third_asn', field: 'src_third_asn'},\n  {text: 'Source Protocol:IP Port', value: 'src_proto_port', field: 'src_proto_port'},\n  {text: 'Destination Country', value: 'Geography_dst', field: 'dst_geo'},\n  {text: 'Destination Region', value: 'dst_geo_region', field: 'dst_geo_region'},\n  {text: 'Destination City', value: 'dst_geo_city', field: 'dst_geo_city'},\n  {text: 'Destination As Number', value: 'AS_dst', field: 'dst_as'},\n  {text: 'Destination Interface', value: 'InterfaceID_dst', field: 'output_port'},\n  {text: 'Destination Port', value: 'Port_dst', field: 'l4_dst_port'},\n  {text: 'Destination VLAN', value: 'VLAN_dst', field: 'vlan_out'},\n  {text: 'Destination IP/CIDR', value: 'IP_dst', field: 'ipv4_dst_addr'},\n  {text: 'Destination Route Prefix/LEN', value: 'dst_route_prefix_len', field: 'dst_route_prefix_len'},\n  {text: 'Destination Route LEN', value: 'dst_route_prefix_len', field: 'dst_route_length'},\n  {text: 'Destination BGP Community', value: 'dst_bgp_community', field: 'dst_bgp_community'},\n  {text: 'Destination BGP AS_Path', value: 'dst_bgp_aspath', field: 'dst_bgp_aspath'},\n  {text: 'Destination BGP Next Hop IP/CIDR', value: 'dst_nexthop_ip', field: 'ipv4_dst_next_hop'},\n  {text: 'Destination Next Hop AS Number', value: 'dst_nexthop_asn', field: 'dst_nexthop_as'},\n  {text: 'Destination 2nd BGP_HOP AS Number', value: 'dst_second_asn', field: 'dst_second_asn'},\n  {text: 'Destination 3nd BGP_HOP AS Number', value: 'dst_third_asn', field: 'dst_third_asn'},\n  {text: 'Destination Protocol:IP Port', value: 'dst_proto_port', field: 'dst_proto_port'},\n  {text: 'Full TOS', value: 'TOS', field: 'tos'},\n  {text: 'Full Protocol', value: 'Proto', field: 'protocl'},\n];\n\nfunction toBitsPerSecond(value, row) {\n  return (value * 8) / row.i_duration;\n}\n\nfunction toPerSecondRate(value, row) {\n  return value / row.i_duration;\n}\n\nfunction totalToAvgPerSecond(value, row, rangeSeconds) {\n  return value / rangeSeconds;\n}\n\nfunction totalToBitsPerSecond(value, row, rangeSeconds) {\n  return (value * 8) / rangeSeconds;\n}\n\nvar unitList = [\n  {\n    text: 'Bits/s',\n    value: 'bytes',\n    field: 'f_sum_both_bytes',\n    outsort: 'avg_both',\n    gfUnit: 'bps',\n    gfAxisLabel: 'Bits/s',\n    transform: toBitsPerSecond,\n    tableFields: [\n      {text: 'Avg', field: 'avg_both', unit: 'bps', transform: totalToBitsPerSecond},\n      {text: '95th Percentile', field: 'p95th_both', unit: 'bps'},\n      {text: 'Max', field: 'max_both', unit: 'bps'},\n    ]\n  },\n  {\n    text: 'Packets/s',\n    value: 'packets',\n    field: 'f_sum_both_pkts',\n    outsort: 'avg_both',\n    gfUnit: 'pps',\n    gfAxislabel: 'Packets/s',\n    transform: toPerSecondRate,\n    tableFields: [\n      {text: 'Avg', field: 'avg_both', unit: 'pps', transform: totalToAvgPerSecond},\n      {text: '95th Percentile', field: 'p95th_both', unit: 'pps'},\n      {text: 'Max', field: 'max_both', unit: 'pps'},\n    ]\n  },\n  {\n    text: 'Unique Src IPs',\n    value: 'unique_src_ip',\n    field: 'f_hll(inet_src_addr,0.0001)',\n    outsort: \"avg_ips\",\n    gfUnit: 'short',\n    gfAxisLabel: 'Unique Src IPs',\n    tableFields: [\n      {text: 'Average', field: 'avg_ips', unit: 'none'},\n      {text: 'p95th', field: 'p95th_ips', unit: 'none' },\n      {text: 'Max', field: 'max_ips', unit: 'none'},\n      {text: 'p95th mbps', field: 'p95th_bits_per_sec', unit: 'bps'},\n      {text: 'p95th pps', field: 'p95th_pkts_per_sec', unit: 'pps'},\n    ]\n  },\n  {\n    text: 'Unique Dst IPs',\n    value: 'unique_dst_ip',\n    field: 'f_hll(inet_dst_addr,0.0001)',\n    outsort: \"avg_ips\",\n    gfUnit: 'short',\n    gfAxisLabel: 'Unique Dst IPs',\n    tableFields: [\n      {text: 'Average', field: 'avg_ips', unit: 'none' },\n      {text: 'p95th', field: 'p95th_ips', unit: 'none' },\n      {text: 'Max', field: 'max_ips', unit: 'none' },\n      {text: 'p95th mbps', field: 'p95th_bits_per_sec', unit: 'bps' },\n      {text: 'p95th pps', field: 'p95th_pkts_per_sec', unit: 'pps' },\n   ]\n  },\n];\n\nvar filterFieldList = [\n  {text: 'Source City', field: 'src_geo_city'},\n  {text: 'Source Region', field: 'src_geo_region'},\n  {text: 'Source Country', field: 'src_geo'},\n  {text: 'Source AS Number', field: 'src_as'},\n  {text: 'Source AS Name', field: 'src_as_name'},\n  {text: 'Source Flow Tag', field: 'src_flow_tags'},\n  {text: 'Source IP Port', field: 'l4_src_port'},\n  {text: 'Source MAC Address', field: 'src_eth_mac'},\n  {text: 'Source VLAN', field: 'vlan_in'},\n  {text: 'Source IP Address', field: 'inet_src_addr'},\n  {text: 'Source Interface ID', field: 'input_port'},\n  {text: 'Source Interface Name', field: 'i_input_interface_description'},\n  {text: 'Source Interface Description', field: 'i_input_snmp_alias'},\n  {text: 'Source Route Prefix', field: 'ipv4_src_route_prefix'},\n  {text: 'Source Route LEN', field: 'src_route_length'},\n  {text: 'Source BGP AS_PATH', field: 'src_bgp_aspath'},\n  {text: 'Source BGP Community', field: 'src_bgp_community'},\n  {text: 'Source Next Hop IP/CIDR', field: 'ipv4_src_next_hop'},\n  {text: 'Source Next Hop AS Number', field: 'src_nexthop_as'},\n  {text: 'Source Next Hop AS Name', field: 'src_nexthop_as_name'},\n  {text: 'Source 2nd BGP_HOP AS Number', field: 'src_second_asn'},\n  {text: 'Source 2nd BGP_HOP AS Name', field: 'src_second_asn_name'},\n  {text: 'Source 3nd BGP_HOP AS Number', field: 'src_third_asn'},\n  {text: 'Source 3nd BGP_HOP AS Name', field: 'src_third_asn_name'},\n  {text: 'Destination City', field: 'dst_geo_city'},\n  {text: 'Destination Region', field: 'dst_geo_region'},\n  {text: 'Destination Country', field: 'dst_geo'},\n  {text: 'Destination AS Number', field: 'dst_as'},\n  {text: 'Destination AS Name', field: 'dst_as_name'},\n  {text: 'Destination Flow Tag', field: 'dst_flow_tags'},\n  {text: 'Destination IP Port', field: 'l4_dst_port'},\n  {text: 'Destination MAC Address', field: 'dst_eth_mac'},\n  {text: 'Destination VLAN', field: 'vlan_out'},\n  {text: 'Destination IP Address', field: 'inet_dst_addr'},\n  {text: 'Destination Interface ID', field: 'output_port'},\n  {text: 'Destination Interface Name', field: 'i_output_interface_description'},\n  {text: 'Destination Interface Description', field: 'i_output_snmp_alias'},\n  {text: 'Destination Route Prefix', field: 'ipv4_dst_route_prefix'},\n  {text: 'Destination Route LEN', field: 'dst_route_length'},\n  {text: 'Destination BGP AS_PATH', field: 'dst_bgp_aspath'},\n  {text: 'Destination BGP Community', field: 'dst_bgp_community'},\n  {text: 'Destination Next Hop IP/CIDR', field: 'ipv4_dst_next_hop'},\n  {text: 'Destination Next Hop AS Number', field: 'dst_nexthop_as'},\n  {text: 'Destination Next Hop AS Name', field: 'dst_nexthop_as_name'},\n  {text: 'Destination 2nd BGP_HOP AS Number', field: 'dst_second_asn'},\n  {text: 'Destination 2nd BGP_HOP AS Name', field: 'dst_second_asn_name'},\n  {text: 'Destination 3nd BGP_HOP AS Number', field: 'dst_third_asn'},\n  {text: 'Destination 3nd BGP_HOP AS Name', field: 'dst_third_asn_name'},\n  {text: 'TCP Flags', field: 'tcp_flags'},\n  {text: 'TCP Flags (raw)', field: 'tcp_flags_raw'},\n  {text: 'Protocol', field: 'protocol'},\n  // {text: 'Protocol Name', field: 'i_protocol_name'},\n  {text: 'INET Family', field: 'inet_family'},\n  {text: 'Device Name', field: 'i_device_name'},\n  {text: 'TCP Retransmits', field: 'tcp_retransmit'},\n  {text: 'TOS/Diffserv', field: 'tos'},\n  {text: 'Per-flow packets (both in and out)', field: 'both_pkts'},\n  {text: 'Per-flow packets (recorded inbound)', field: 'in_pkts'},\n  {text: 'Per-flow bytes (recorded inbound)', field: 'in_bytes'},\n  {text: 'Per-flow packets (recorded outbound)', field: 'out_pkts'},\n  {text: 'Per-flow bytes (recorded outbound)', field: 'out_bytes'},\n];\n\nexport {metricList, unitList, filterFieldList};\n\n","import angular from 'angular';\n\nclass KentikAPI {\n  baseUrl: string;\n\n  /** @ngInject */\n  constructor(public backendSrv: any) {\n    this.baseUrl = 'api/plugin-proxy/kentik-app';\n  }\n\n  getDevices() {\n    return this._get('/api/v5/devices')\n    .then(response => {\n      if (response.data && response.data.devices) {\n        return response.data.devices;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  getFieldValues(field) {\n    let query = `SELECT DISTINCT ${field} FROM all_devices ORDER BY ${field} ASC`;\n    return this.invokeSQLQuery(query);\n  }\n\n  invokeTopXDataQuery(query) {\n    let kentik_v5_query = {\n      \"queries\": [\n        { \"query\": query, \"bucketIndex\": 0 }\n      ]\n    };\n\n    return this._post('/api/v5/query/topXdata', kentik_v5_query);\n  }\n\n  invokeSQLQuery(query) {\n    let data = {\n      \"query\": query\n    };\n\n    return this._post('/api/v5/query/sql', data);\n  }\n\n  _get(url) {\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.baseUrl + url,\n    }).catch(error => {\n      console.log(error);\n      if (error.err) {\n        return Promise.reject(error.err);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  _post(url, data) {\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: this.baseUrl + url,\n      data: data\n    })\n    .then(response => {\n      if (response.data) {\n        return response.data;\n      } else {\n        return [];\n      }\n    }).catch(error => {\n      console.log(error);\n      if (error.err) {\n        return Promise.reject(error.err);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n}\n\nangular\n  .module('grafana.services')\n  .service('kentikAPISrv', KentikAPI);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport './kentikAPI';\n\nfunction getUTCTimestamp() {\n  let ts = new Date();\n  return ts.getTime() + ts.getTimezoneOffset() * 60 * 1000;\n}\n\n// Get hash of Kentik query\nfunction getHash(queryObj) {\n  let query = _.cloneDeep(queryObj);\n  query.starting_time = null;\n  query.ending_time = null;\n  return JSON.stringify(query);\n}\n\n// Prevent too frequent queries\nfunction getMaxRefreshInterval(query) {\n  let interval: any = Date.parse(query.ending_time) - Date.parse(query.starting_time);\n  if (interval > moment.duration(1, 'months')) {\n    return 60 * 60 * 1000; // 1 hour\n  } else if (interval > moment.duration(1, 'day')) {\n    return 15 * 60 * 1000; // 15 min\n  } else {\n    return 5 * 60 * 1000; // 5 min\n  }\n}\n\nclass KentikProxy {\n  kentikAPI: any;\n  cache: any;\n  cacheUpdateInterval: number;\n  requestCachingIntervals: { '1d': number; };\n  getDevices: () => Promise<any[]>;\n\n  /** @ngInject */\n  constructor(backendSrv, kentikAPISrv: any) {\n    this.kentikAPI = kentikAPISrv;\n    this.cache = {};\n    this.cacheUpdateInterval = 5 * 60 * 1000; // 5 min by default\n    this.requestCachingIntervals = {\n      '1d': 0\n    };\n\n    this.getDevices = this.kentikAPI.getDevices.bind(this.kentikAPI);\n  }\n\n  invokeTopXDataQuery(query) {\n    let cached_query = _.cloneDeep(query);\n    let hash = getHash(cached_query);\n\n    if (this.shouldInvoke(query)) {\n      // Invoke query\n      return this.kentikAPI.invokeTopXDataQuery(query)\n      .then(result => {\n        let timestamp = getUTCTimestamp();\n\n        this.cache[hash] = {\n          timestamp: timestamp,\n          query: cached_query,\n          result: result\n        };\n        console.log('Invoke Kentik query');\n        return result;\n      });\n    } else {\n      // Get from cache\n      console.log('Get result from cache');\n      return Promise.resolve(this.cache[hash].result);\n    }\n  }\n\n  // Decide, is query shold be invoked or get data from cahce?\n  shouldInvoke(query) {\n    let kentik_query = query;\n    let hash = getHash(kentik_query);\n    let timestamp = getUTCTimestamp();\n\n    let starting_time = Date.parse(kentik_query.starting_time);\n    let ending_time = Date.parse(kentik_query.ending_time);\n    let query_range = ending_time - starting_time;\n\n    let cache_starting_time = this.cache[hash] ? Date.parse(this.cache[hash].query.starting_time) : null;\n    let cache_ending_time = this.cache[hash] ? Date.parse(this.cache[hash].query.ending_time) : null;\n    let cached_query_range = cache_ending_time - cache_starting_time;\n\n    let max_refresh_interval = getMaxRefreshInterval(kentik_query);\n\n    return (\n      !this.cache[hash] ||\n      timestamp - ending_time > max_refresh_interval ||\n      (this.cache[hash] && (\n        timestamp - cache_ending_time > max_refresh_interval ||\n        starting_time < cache_starting_time ||\n        Math.abs(query_range - cached_query_range) > 60 * 1000 // is time range changed?\n      ))\n    );\n  }\n\n  getFieldValues(field) {\n    let ts = getUTCTimestamp();\n    if (this.cache[field] && ts - this.cache[field].ts < this.cacheUpdateInterval) {\n      return Promise.resolve(this.cache[field].value);\n    } else {\n      return this.kentikAPI.getFieldValues(field)\n      .then(result => {\n        ts = getUTCTimestamp();\n        this.cache[field] = {\n          ts: ts,\n          value: result\n        };\n\n        return result;\n      });\n    }\n  }\n}\n\nangular\n  .module('grafana.services')\n  .service('kentikProxySrv', KentikProxy);\n","import _ from 'lodash';\nimport { unitList, filterFieldList } from './metric_def';\n\nconst KENTIK_TIME_FORMAT = \"YYYY-MM-DD HH:mm:ss\";\n\nfunction formatMetricAggs(unitDef) {\n  let aggs = [\n    {\n      \"name\": \"avg_both\",\n      \"column\": unitDef.field,\n      \"fn\": \"average\",\n      \"raw\": true, // Set to get timeseries data\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"p95th_both\",\n      \"column\": unitDef.field,\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"max_both\",\n      \"column\": unitDef.field,\n      \"fn\": \"max\",\n      \"sample_rate\": 1\n    }\n  ];\n\n  return aggs;\n}\n\nfunction formatUniqueIpAggs(unitDef) {\n  let aggs = [\n    {\n      \"name\": \"avg_ips\",\n      \"column\": unitDef.field,\n      \"fn\": \"average\",\n      \"raw\": true,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"p95th_ips\",\n      \"column\": unitDef.field,\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"max_ips\",\n      \"column\": unitDef.field,\n      \"fn\": \"max\",\n      \"sample_rate\": 1,\n      \"raw\": true\n    },\n    {\n      \"name\": \"p95th_bits_per_sec\",\n      \"column\": \"f_sum_both_bytes\",\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    },\n    {\n      \"name\": \"p95th_pkts_per_sec\",\n      \"column\": \"f_sum_both_pkts\",\n      \"fn\": \"percentile\",\n      \"rank\": 95,\n      \"sample_rate\": 1\n    }\n  ];\n\n  return aggs;\n}\n\nfunction formatAggs(unitDef) {\n  let aggs = [];\n  if (unitDef.value === \"unique_src_ip\" ||\n      unitDef.value === \"unique_dst_ip\") {\n    aggs = formatUniqueIpAggs(unitDef);\n  } else {\n    aggs = formatMetricAggs(unitDef);\n  }\n\n  return aggs;\n}\n\nfunction formatFilters(kentikFilterGroups) {\n  let filters_obj = {\n    \"connector\": \"All\",\n    \"filterGroups\": []\n  };\n\n  if (kentikFilterGroups.length) {\n    filters_obj.filterGroups = kentikFilterGroups;\n  }\n\n  return filters_obj;\n}\n\nfunction buildTopXdataQuery(options) {\n  let unitDef = _.find(unitList, { value: options.unit });\n  let starting_time = options.range.from.utc().format(KENTIK_TIME_FORMAT);\n  let ending_time = options.range.to.utc().format(KENTIK_TIME_FORMAT);\n\n  let query = {\n    \"dimension\": [options.metric],\n    \"metric\": options.unit,\n    \"matrixBy\": [],\n    \"cidr\": 32,\n    \"cidr6\": 128,\n    \"topx\": \"8\", // Visualization depth (8 by default)\n    \"depth\": 100,\n    \"fastData\": \"Auto\",\n    \"lookback_seconds\": 0,\n    \"time_format\": \"UTC\",\n    \"starting_time\": starting_time,\n    \"ending_time\": ending_time,\n    \"device_name\": options.deviceNames,\n    \"outsort\": unitDef.outsort,\n    \"aggregates\": formatAggs(unitDef),\n    \"filters_obj\": formatFilters(options.kentikFilterGroups)\n  };\n\n  return query;\n}\n\nfunction convertToKentikFilter(filterObj) {\n  // Use Kentik 'not equal' style\n  if (filterObj.operator === '!=') {\n    filterObj.operator = '<>';\n  }\n\n  // If no field definition found assume that custom field is used.\n  let filterField;\n  let filterFieldDef = _.find(filterFieldList, { text: filterObj.key });\n  if (filterFieldDef) {\n    filterField = filterFieldDef.field;\n  } else {\n    filterField = filterObj.key;\n  }\n\n  return {\n    filterField: filterField,\n    operator: filterObj.operator,\n    filterValue: filterObj.value\n  };\n}\n\nfunction convertToKentikFilterGroup(filters) {\n  if (filters.length) {\n    let kentikFilters = _.map(filters, convertToKentikFilter);\n    let connector = 'All';\n    if (filters[0].condition && (\n      filters[0].condition.toLowerCase() === 'or' ||\n      filters[0].condition.toLowerCase() === 'any')) {\n      connector = 'Any';\n    }\n    return [{\n      \"connector\": connector,\n      \"filters\": kentikFilters,\n      \"not\": false,\n    }];\n  } else {\n    return [];\n  }\n}\n\nexport default {\n  buildTopXdataQuery: buildTopXdataQuery,\n  formatAggs: formatAggs,\n  convertToKentikFilterGroup: convertToKentikFilterGroup\n};\n","import {metricList, unitList, filterFieldList} from './metric_def';\nimport _ from 'lodash';\nimport './kentikProxy';\nimport TableModel from 'grafana/app/core/table_model';\nimport queryBuilder from './query_builder';\n\nclass KentikDatasource {\n  name: string;\n  kentik: any;\n\n  /** @ngInject */\n  constructor(public instanceSettings: any, public templateSrv: any, kentikProxySrv: any)  {\n    this.name = instanceSettings.name;\n    this.kentik = kentikProxySrv;\n  }\n\n  interpolateDeviceField(value, variable) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return value.join(',');\n  }\n\n  query(options) {\n    if (!options.targets || options.targets.length === 0) {\n      return Promise.resolve({data: []});\n    }\n\n    let target = options.targets[0];\n    let deviceNames = this.templateSrv.replace(target.device, options.scopedVars, this.interpolateDeviceField.bind(this));\n\n    let kentikFilters = this.templateSrv.getAdhocFilters(this.name);\n    kentikFilters = queryBuilder.convertToKentikFilterGroup(kentikFilters);\n\n    let query_options = {\n      deviceNames: deviceNames,\n      range: {\n        from: options.range.from,\n        to: options.range.to\n      },\n      metric: this.templateSrv.replace(target.metric),\n      unit: this.templateSrv.replace(target.unit),\n      kentikFilterGroups: kentikFilters\n    };\n    let query = queryBuilder.buildTopXdataQuery(query_options);\n\n    return this.kentik.invokeTopXDataQuery(query)\n    .then(this.processResponse.bind(this, query, target.mode, options))\n    .then(result => {\n      return {\n        data: result\n      };\n    });\n  }\n\n  processResponse(query, mode, options, data) {\n    if (!data.results) {\n      return Promise.reject({message: 'no kentik data'});\n    }\n\n    var bucketData = data.results[0].data;\n    if (bucketData.length === 0) {\n      return [];\n    }\n\n    var metricDef = _.find(metricList, {value: query.dimension[0]});\n    var unitDef = _.find(unitList, {value: query.metric});\n\n    if (mode === 'table') {\n      return this.processTableData(bucketData, metricDef, unitDef);\n    } else {\n      return this.processTimeSeries(bucketData, query, options);\n    }\n  }\n\n  processTimeSeries(bucketData, query, options?: any) {\n    let seriesList = [];\n    let endIndex = query.topx;\n    if (bucketData.length < endIndex) {\n      endIndex = bucketData.length;\n    }\n\n    for (let i = 0; i < endIndex; i++) {\n      let series = bucketData[i];\n      let timeseries = _.find(series.timeSeries, series => {\n        return series.flow && series.flow.length;\n      });\n      let seriesName = series.key;\n\n      if (timeseries) {\n        let grafana_series = {\n          target: seriesName,\n          datapoints: _.map(timeseries.flow, point => {\n            return [point[1], point[0]];\n          })\n        };\n        seriesList.push(grafana_series);\n      }\n    }\n\n    return seriesList;\n  }\n\n  processTableData(bucketData, metricDef, unitDef) {\n    var table = new TableModel();\n\n    table.columns.push({text: metricDef.text});\n\n    for (let col of unitDef.tableFields) {\n      table.columns.push({text: col.text, unit: col.unit});\n    }\n\n    _.forEach(bucketData, row => {\n      var seriesName = row.key;\n\n      var values = [seriesName];\n      for (let col of unitDef.tableFields) {\n        var val = row[col.field];\n\n        if (_.isString(val)) {\n          val = parseFloat(val);\n        }\n\n        values.push(val);\n      }\n\n      table.rows.push(values);\n    });\n\n    return [table];\n  }\n\n  metricFindQuery(query) {\n    if (query === 'metrics()') {\n      return Promise.resolve(metricList);\n    }\n    if (query === 'units()') {\n      return Promise.resolve(unitList);\n    }\n\n    return this.kentik.getDevices()\n    .then(devices => {\n      return devices.map(device => {\n        return {text: device.device_name, value: device.device_name};\n      });\n    });\n  }\n\n  getTagKeys() {\n    return Promise.resolve(filterFieldList);\n  }\n\n  getTagValues(options) {\n    if (options) {\n      let field = _.find(filterFieldList, {text: options.key}).field;\n      return this.kentik.getFieldValues(field)\n      .then(result => {\n        return result.rows.map(row => {\n          return {text: row[field].toString()};\n        });\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n}\n\nexport {KentikDatasource};\n","export class ConfigCtrl {\n  static templateUrl = 'datasource/config.html';\n}\n","import {QueryCtrl} from 'grafana/app/plugins/sdk';\n\nclass KentikQueryCtrl extends QueryCtrl {\n  static templateUrl: string;\n  queryModes: any[];\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.mode = this.target.mode || 'graph';\n\n    this.queryModes = [\n      {value: 'graph', text: 'Graph'},\n      {value: 'table', text: 'Table'}\n    ];\n  }\n}\n\nKentikQueryCtrl.templateUrl = 'datasource/query_editor.html';\n\nexport {KentikQueryCtrl};\n","import {KentikDatasource} from './datasource';\nimport {ConfigCtrl} from './config';\nimport {KentikQueryCtrl} from './query_editor';\n\nexport {\n  KentikDatasource as Datasource,\n  ConfigCtrl as ConfigCtrl,\n  KentikQueryCtrl as QueryCtrl\n};\n"],"sourceRoot":""}