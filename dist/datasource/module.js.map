{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"app/plugins/sdk\"","webpack:///external \"angular\"","webpack:///external \"moment\"","webpack:///external \"app/core/table_model\"","webpack:///./datasource/metric_def.ts","webpack:///./datasource/kentikAPI.ts","webpack:///./datasource/kentikProxy.ts","webpack:///./datasource/query_builder.ts","webpack:///./datasource/datasource.ts","webpack:///./datasource/config.ts","webpack:///./datasource/query_editor.ts","webpack:///./datasource/module.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__9__","metricList","text","field","unitList","outsort","gfUnit","gfAxisLabel","transform","row","i_duration","tableFields","unit","rangeSeconds","gfAxislabel","filterFieldList","KentikAPI","backendSrv","this","baseUrl","$inject","getDevices","_get","then","response","data","devices","getFieldValues","query","invokeSQLQuery","_a","sent","invokeTopXDataQuery","kentikV5Query","queries","bucketIndex","_post","url","datasourceRequest","method","catch","error","console","log","err","Promise","reject","getUTCTimestamp","ts","Date","getTime","getTimezoneOffset","getHash","queryObj","external_lodash_","starting_time","ending_time","JSON","stringify","kentikProxy_KentikProxy","KentikProxy","kentikAPISrv","kentikAPI","cache","cacheUpdateInterval","requestCachingIntervals","1d","_this","cachedQuery","hash","shouldInvoke","result","timestamp","resolve","kentikQuery","startingTime","parse","endingTime","queryRange","cacheStartingTime","cacheEndingTime","cachedQueryRange","maxRefreshInterval","interval","external_moment_","getMaxRefreshInterval","Math","abs","getCustomDimensions","customDimensions","map","dimension","values","_getDimensionPopulatorsValues","display_name","getSavedFilters","savedFilters","filter","filter_name","populators","reduce","populator","push","KENTIK_TIME_FORMAT","formatAggs","unitDef","column","fn","raw","sample_rate","rank","formatUniqueIpAggs","formatMetricAggs","convertToKentikFilter","filterObj","filterDef","operator","filterField","filterValue","convertToKentikSavedFilter","filter_id","id","is_not","query_builder","buildTopXdataQuery","options","range","from","utc","format","to","metric","matrixBy","cidr","cidr6","topx","depth","fastData","lookback_seconds","time_format","device_name","deviceNames","aggregates","filters_obj","kentikFilterGroups","filtersObj","connector","filterGroups","length","formatFilters","saved_filters","kentikSavedFilters","filters","savedFiltersList","kentikFilters","filterFieldListExtended","_i","filters_1","filterFieldDef","undefined","savedFilterDef","condition","toLowerCase","not","datasource_KentikDatasource","KentikDatasource","instanceSettings","templateSrv","kentikProxySrv","kentik","interpolateDeviceField","variable","multi","includeAll","targets","target","getAdhocFilters","convertToKentikFilterGroup","replace","queryOptions","processResponse","results","_getExtendedDimensionsList","message","extendedMetricList","processTableData","bucketData","metricDef","processTimeSeries","seriesList","endIndex","series","timeseries","timeSeries","flow","seriesName","datapoints","point","grafanaSeries","table","table_model_default","a","columns","col","val","parseFloat","rows","metricFindQuery","datasource_generator","device","label","initialList","field_1","ConfigCtrl","templateUrl","b","__","KentikQueryCtrl","_super","$scope","$injector","queryModes","__webpack_exports__"],"mappings":"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","file":"datasource/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","const metricList = [\n  { text: 'Traffic', value: 'Traffic', field: 'traffic' },\n  { text: 'TopFlow', value: 'TopFlow', field: 'TopFlow' },\n  { text: 'Top flow IP', value: 'TopFlowsIP', field: 'TopFlowsIP' },\n  { text: 'Source Country', value: 'Geography_src', field: 'src_geo' },\n  { text: 'Source Geo Region', value: 'src_geo_region', field: 'src_geo_region' },\n  { text: 'Source Geo City', value: 'src_geo_city', field: 'src_geo_city' },\n  { text: 'Source As Number', value: 'AS_src', field: 'src_as' },\n  { text: 'Source Interface', value: 'InterfaceID_src', field: 'input_port' },\n  { text: 'Source Port', value: 'Port_src', field: 'l4_src_port' },\n  { text: 'Source VLAN', value: 'VLAN_src', field: 'vlan_in' },\n  { text: 'Source IP/CIDR', value: 'IP_src', field: 'ipv4_src_addr' },\n  { text: 'Source MAC Address', value: 'src_eth_mac', field: 'src_eth_mac' },\n  { text: 'Source Route Prefix/LEN', value: 'src_route_prefix_len', field: 'src_route_prefix_len' },\n  { text: 'Source Route LEN', value: 'src_route_length', field: 'src_route_length' },\n  { text: 'Source BGP Community', value: 'src_bgp_community', field: 'src_bgp_community' },\n  { text: 'Source BGP AS_Path', value: 'src_bgp_aspath', field: 'src_bgp_aspath' },\n  { text: 'Source BGP Next Hop IP/CIDR', value: 'src_nexthop_ip', field: 'ipv4_src_next_hop' },\n  { text: 'Source Next Hop AS Number', value: 'src_nexthop_asn', field: 'src_nexthop_as' },\n  { text: 'Source 2nd BGP_HOP AS Number', value: 'src_second_asn', field: 'src_second_asn' },\n  { text: 'Source 3nd BGP_HOP AS Number', value: 'src_third_asn', field: 'src_third_asn' },\n  { text: 'Source Protocol:IP Port', value: 'src_proto_port', field: 'src_proto_port' },\n  { text: 'Destination Country', value: 'Geography_dst', field: 'dst_geo' },\n  { text: 'Destination Region', value: 'dst_geo_region', field: 'dst_geo_region' },\n  { text: 'Destination City', value: 'dst_geo_city', field: 'dst_geo_city' },\n  { text: 'Destination As Number', value: 'AS_dst', field: 'dst_as' },\n  { text: 'Destination Interface', value: 'InterfaceID_dst', field: 'output_port' },\n  { text: 'Destination Port', value: 'Port_dst', field: 'l4_dst_port' },\n  { text: 'Destination VLAN', value: 'VLAN_dst', field: 'vlan_out' },\n  { text: 'Destination IP/CIDR', value: 'IP_dst', field: 'ipv4_dst_addr' },\n  { text: 'Destination MAC Address', value: 'dst_eth_mac', field: 'dst_eth_mac' },\n  { text: 'Destination Route Prefix/LEN', value: 'dst_route_prefix_len', field: 'dst_route_prefix_len' },\n  { text: 'Destination Route LEN', value: 'dst_route_length', field: 'dst_route_length' },\n  { text: 'Destination BGP Community', value: 'dst_bgp_community', field: 'dst_bgp_community' },\n  { text: 'Destination BGP AS_Path', value: 'dst_bgp_aspath', field: 'dst_bgp_aspath' },\n  { text: 'Destination BGP Next Hop IP/CIDR', value: 'dst_nexthop_ip', field: 'ipv4_dst_next_hop' },\n  { text: 'Destination Next Hop AS Number', value: 'dst_nexthop_asn', field: 'dst_nexthop_as' },\n  { text: 'Destination 2nd BGP_HOP AS Number', value: 'dst_second_asn', field: 'dst_second_asn' },\n  { text: 'Destination 3nd BGP_HOP AS Number', value: 'dst_third_asn', field: 'dst_third_asn' },\n  { text: 'Destination Protocol:IP Port', value: 'dst_proto_port', field: 'dst_proto_port' },\n  { text: 'Full Device', value: 'i_device_id', field: 'i_device_id' },\n  { text: 'Full Site', value: 'i_device_site_name', field: 'i_device_site_name' },\n  { text: 'Full Protocol', value: 'Proto', field: 'protocl' },\n  { text: 'Full INET Family', value: 'inet_family', field: 'inet_family' },\n  { text: 'Full TOS', value: 'TOS', field: 'tos' },\n  { text: 'Full TCP flags', value: 'tcp_flags', field: 'tcp_flags' },\n  { text: 'AS Top Talkers', value: 'ASTopTalkers', field:'ASTopTalkers'},\n  { text: 'Interface Top Talkers', value: 'InterfaceTopTalkers', field: 'InterfaceTopTalkers' },\n  { text: 'Port to Port Talkers', value: 'PortPortTalkers', field: 'PortPortTalkers' },\n  { text: 'Region Top Talkers', value: 'RegionTopTalkers', field: 'RegionTopTalkers' },\n];\n\nfunction toBitsPerSecond(value, row) {\n  return value * 8 / row.i_duration;\n}\n\nfunction toPerSecondRate(value, row) {\n  return value / row.i_duration;\n}\n\nfunction totalToAvgPerSecond(value, row, rangeSeconds) {\n  return value / rangeSeconds;\n}\n\nfunction totalToBitsPerSecond(value, row, rangeSeconds) {\n  return value * 8 / rangeSeconds;\n}\n\nconst unitList = [\n  {\n    text: 'Bits/s',\n    value: 'bytes',\n    field: 'f_sum_both_bytes',\n    outsort: 'avg_both',\n    gfUnit: 'bps',\n    gfAxisLabel: 'Bits/s',\n    transform: toBitsPerSecond,\n    tableFields: [\n      { text: 'Avg', field: 'avg_both', unit: 'bps', transform: totalToBitsPerSecond },\n      { text: '95th Percentile', field: 'p95th_both', unit: 'bps' },\n      { text: 'Max', field: 'max_both', unit: 'bps' },\n    ],\n  },\n  {\n    text: 'Packets/s',\n    value: 'packets',\n    field: 'f_sum_both_pkts',\n    outsort: 'avg_both',\n    gfUnit: 'pps',\n    gfAxislabel: 'Packets/s',\n    transform: toPerSecondRate,\n    tableFields: [\n      { text: 'Avg', field: 'avg_both', unit: 'pps', transform: totalToAvgPerSecond },\n      { text: '95th Percentile', field: 'p95th_both', unit: 'pps' },\n      { text: 'Max', field: 'max_both', unit: 'pps' },\n    ],\n  },\n  {\n    text: 'Unique Src IPs',\n    value: 'unique_src_ip',\n    field: 'f_hll(inet_src_addr,0.0001)',\n    outsort: 'avg_ips',\n    gfUnit: 'short',\n    gfAxisLabel: 'Unique Src IPs',\n    tableFields: [\n      { text: 'Average', field: 'avg_ips', unit: 'none' },\n      { text: 'p95th', field: 'p95th_ips', unit: 'none' },\n      { text: 'Max', field: 'max_ips', unit: 'none' },\n      { text: 'p95th mbps', field: 'p95th_bits_per_sec', unit: 'bps' },\n      { text: 'p95th pps', field: 'p95th_pkts_per_sec', unit: 'pps' },\n    ],\n  },\n  {\n    text: 'Unique Dst IPs',\n    value: 'unique_dst_ip',\n    field: 'f_hll(inet_dst_addr,0.0001)',\n    outsort: 'avg_ips',\n    gfUnit: 'short',\n    gfAxisLabel: 'Unique Dst IPs',\n    tableFields: [\n      { text: 'Average', field: 'avg_ips', unit: 'none' },\n      { text: 'p95th', field: 'p95th_ips', unit: 'none' },\n      { text: 'Max', field: 'max_ips', unit: 'none' },\n      { text: 'p95th mbps', field: 'p95th_bits_per_sec', unit: 'bps' },\n      { text: 'p95th pps', field: 'p95th_pkts_per_sec', unit: 'pps' },\n    ],\n  },\n];\n\nconst filterFieldList = [\n  { text: 'Source City', field: 'src_geo_city' },\n  { text: 'Source Region', field: 'src_geo_region' },\n  { text: 'Source Country', field: 'src_geo' },\n  { text: 'Source AS Number', field: 'src_as' },\n  { text: 'Source AS Name', field: 'src_as_name' },\n  { text: 'Source Flow Tag', field: 'src_flow_tags' },\n  { text: 'Source IP Port', field: 'l4_src_port' },\n  { text: 'Source MAC Address', field: 'src_eth_mac' },\n  { text: 'Source VLAN', field: 'vlan_in' },\n  { text: 'Source IP Address', field: 'inet_src_addr' },\n  { text: 'Source Interface ID', field: 'input_port' },\n  { text: 'Source Interface Name', field: 'i_input_interface_description' },\n  { text: 'Source Interface Description', field: 'i_input_snmp_alias' },\n  { text: 'Source Route Prefix', field: 'ipv4_src_route_prefix' },\n  { text: 'Source Route LEN', field: 'src_route_length' },\n  { text: 'Source BGP AS_PATH', field: 'src_bgp_aspath' },\n  { text: 'Source BGP Community', field: 'src_bgp_community' },\n  { text: 'Source Next Hop IP/CIDR', field: 'ipv4_src_next_hop' },\n  { text: 'Source Next Hop AS Number', field: 'src_nexthop_as' },\n  { text: 'Source Next Hop AS Name', field: 'src_nexthop_as_name' },\n  { text: 'Source 2nd BGP_HOP AS Number', field: 'src_second_asn' },\n  { text: 'Source 2nd BGP_HOP AS Name', field: 'src_second_asn_name' },\n  { text: 'Source 3nd BGP_HOP AS Number', field: 'src_third_asn' },\n  { text: 'Source 3nd BGP_HOP AS Name', field: 'src_third_asn_name' },\n  { text: 'Destination City', field: 'dst_geo_city' },\n  { text: 'Destination Region', field: 'dst_geo_region' },\n  { text: 'Destination Country', field: 'dst_geo' },\n  { text: 'Destination AS Number', field: 'dst_as' },\n  { text: 'Destination AS Name', field: 'dst_as_name' },\n  { text: 'Destination Flow Tag', field: 'dst_flow_tags' },\n  { text: 'Destination IP Port', field: 'l4_dst_port' },\n  { text: 'Destination MAC Address', field: 'dst_eth_mac' },\n  { text: 'Destination VLAN', field: 'vlan_out' },\n  { text: 'Destination IP Address', field: 'inet_dst_addr' },\n  { text: 'Destination Interface ID', field: 'output_port' },\n  { text: 'Destination Interface Name', field: 'i_output_interface_description' },\n  { text: 'Destination Interface Description', field: 'i_output_snmp_alias' },\n  { text: 'Destination Route Prefix', field: 'ipv4_dst_route_prefix' },\n  { text: 'Destination Route LEN', field: 'dst_route_length' },\n  { text: 'Destination BGP AS_PATH', field: 'dst_bgp_aspath' },\n  { text: 'Destination BGP Community', field: 'dst_bgp_community' },\n  { text: 'Destination Next Hop IP/CIDR', field: 'ipv4_dst_next_hop' },\n  { text: 'Destination Next Hop AS Number', field: 'dst_nexthop_as' },\n  { text: 'Destination Next Hop AS Name', field: 'dst_nexthop_as_name' },\n  { text: 'Destination 2nd BGP_HOP AS Number', field: 'dst_second_asn' },\n  { text: 'Destination 2nd BGP_HOP AS Name', field: 'dst_second_asn_name' },\n  { text: 'Destination 3nd BGP_HOP AS Number', field: 'dst_third_asn' },\n  { text: 'Destination 3nd BGP_HOP AS Name', field: 'dst_third_asn_name' },\n  { text: 'TCP Flags', field: 'tcp_flags' },\n  { text: 'TCP Flags (raw)', field: 'tcp_flags_raw' },\n  { text: 'Protocol', field: 'protocol' },\n  // {text: 'Protocol Name', field: 'i_protocol_name'},\n  { text: 'INET Family', field: 'inet_family' },\n  { text: 'Device Name', field: 'i_device_name' },\n  { text: 'TCP Retransmits', field: 'tcp_retransmit' },\n  { text: 'TOS/Diffserv', field: 'tos' },\n  { text: 'Per-flow packets (both in and out)', field: 'both_pkts' },\n  { text: 'Per-flow packets (recorded inbound)', field: 'in_pkts' },\n  { text: 'Per-flow bytes (recorded inbound)', field: 'in_bytes' },\n  { text: 'Per-flow packets (recorded outbound)', field: 'out_pkts' },\n  { text: 'Per-flow bytes (recorded outbound)', field: 'out_bytes' },\n];\n\nexport { metricList, unitList, filterFieldList };\n","import angular from 'angular';\n\nexport class KentikAPI {\n  baseUrl: string;\n\n  /** @ngInject */\n  constructor(public backendSrv: any) {\n    this.baseUrl = 'api/plugin-proxy/kentik-app';\n  }\n\n  getDevices() {\n    return this._get('/api/v5/devices').then(response => {\n      if (response.data && response.data.devices) {\n        return response.data.devices;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  getFieldValues(field: string) {\n    const query = `SELECT DISTINCT ${field} FROM all_devices ORDER BY ${field} ASC`;\n    return this.invokeSQLQuery(query);\n  }\n\n  async getCustomDimensions() {\n    const data = await this._get('/api/v5/customdimensions');\n    return data.data.customDimensions;\n  }\n\n  async getSavedFilters() {\n    const data = await this._get('/api/v5/saved-filters');\n    return data.data;\n  }\n\n  invokeTopXDataQuery(query: any) {\n    const kentikV5Query = {\n      queries: [{ query: query, bucketIndex: 0 }],\n    };\n\n    return this._post('/api/v5/query/topXdata', kentikV5Query);\n  }\n\n  invokeSQLQuery(query: any) {\n    const data = {\n      query: query,\n    };\n\n    return this._post('/api/v5/query/sql', data);\n  }\n\n  _get(url: string) {\n    return this.backendSrv\n      .datasourceRequest({\n        method: 'GET',\n        url: this.baseUrl + url,\n      })\n      .catch(error => {\n        console.log(error);\n        if (error.err) {\n          return Promise.reject(error.err);\n        } else {\n          return Promise.reject(error);\n        }\n      });\n  }\n\n  _post(url: string, data: any) {\n    return this.backendSrv\n      .datasourceRequest({\n        method: 'POST',\n        url: this.baseUrl + url,\n        data: data,\n      })\n      .then(response => {\n        if (response.data) {\n          return response.data;\n        } else {\n          return [];\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        if (error.err) {\n          return Promise.reject(error.err);\n        } else {\n          return Promise.reject(error);\n        }\n      });\n  }\n}\n\nangular.module('grafana.services').service('kentikAPISrv', KentikAPI);\n","import angular from 'angular';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nimport './kentikAPI';\n\nfunction getUTCTimestamp() {\n  const ts = new Date();\n  return ts.getTime() + ts.getTimezoneOffset() * 60 * 1000;\n}\n\n// Get hash of Kentik query\nfunction getHash(queryObj: any) {\n  const query = _.cloneDeep(queryObj);\n  query.starting_time = null;\n  query.ending_time = null;\n  return JSON.stringify(query);\n}\n\n// Prevent too frequent queries\nfunction getMaxRefreshInterval(query: any) {\n  const interval: any = Date.parse(query.ending_time) - Date.parse(query.starting_time);\n  if (interval > moment.duration(1, 'months')) {\n    return 60 * 60 * 1000; // 1 hour\n  } else if (interval > moment.duration(1, 'day')) {\n    return 15 * 60 * 1000; // 15 min\n  } else {\n    return 5 * 60 * 1000; // 5 min\n  }\n}\n\nexport class KentikProxy {\n  kentikAPI: any;\n  cache: any;\n  cacheUpdateInterval: number;\n  requestCachingIntervals: { '1d': number };\n  getDevices: () => Promise<any[]>;\n\n  /** @ngInject */\n  constructor(backendSrv, kentikAPISrv: any) {\n    this.kentikAPI = kentikAPISrv;\n    this.cache = {};\n    this.cacheUpdateInterval = 5 * 60 * 1000; // 5 min by default\n    this.requestCachingIntervals = {\n      '1d': 0,\n    };\n\n    this.getDevices = this.kentikAPI.getDevices.bind(this.kentikAPI);\n  }\n\n  invokeTopXDataQuery(query: any) {\n    const cachedQuery = _.cloneDeep(query);\n    const hash = getHash(cachedQuery);\n\n    if (this.shouldInvoke(query)) {\n      // Invoke query\n      return this.kentikAPI.invokeTopXDataQuery(query).then(result => {\n        const timestamp = getUTCTimestamp();\n\n        this.cache[hash] = {\n          timestamp: timestamp,\n          query: cachedQuery,\n          result: result,\n        };\n        console.log('Invoke Kentik query');\n        return result;\n      });\n    } else {\n      // Get from cache\n      console.log('Get result from cache');\n      return Promise.resolve(this.cache[hash].result);\n    }\n  }\n\n  // Decide, is query shold be invoked or get data from cahce?\n  shouldInvoke(query: any) {\n    const kentikQuery = query;\n    const hash = getHash(kentikQuery);\n    const timestamp = getUTCTimestamp();\n\n    const startingTime = Date.parse(kentikQuery.starting_time);\n    const endingTime = Date.parse(kentikQuery.ending_time);\n    const queryRange = endingTime - startingTime;\n\n    const cacheStartingTime = this.cache[hash] ? Date.parse(this.cache[hash].query.starting_time) : null;\n    const cacheEndingTime = this.cache[hash] ? Date.parse(this.cache[hash].query.ending_time) : null;\n    const cachedQueryRange = cacheEndingTime - cacheStartingTime;\n\n    const maxRefreshInterval = getMaxRefreshInterval(kentikQuery);\n\n    return (\n      !this.cache[hash] ||\n      timestamp - endingTime > maxRefreshInterval ||\n      (this.cache[hash] &&\n        (timestamp - cacheEndingTime > maxRefreshInterval ||\n          startingTime < cacheStartingTime ||\n          Math.abs(queryRange - cachedQueryRange) > 60 * 1000)) // is time range changed?\n    );\n  }\n\n  getFieldValues(field: string) {\n    let ts = getUTCTimestamp();\n    if (this.cache[field] && ts - this.cache[field].ts < this.cacheUpdateInterval) {\n      return Promise.resolve(this.cache[field].value);\n    } else {\n      return this.kentikAPI.getFieldValues(field).then(result => {\n        ts = getUTCTimestamp();\n        this.cache[field] = {\n          ts: ts,\n          value: result,\n        };\n\n        return result;\n      });\n    }\n  }\n\n  async getCustomDimensions() {\n    if (this.cache.customDimensions === undefined) {\n      const customDimensions = await this.kentikAPI.getCustomDimensions();\n      this.cache.customDimensions = customDimensions.map(dimension => ({\n        values: this._getDimensionPopulatorsValues(dimension),\n        text: `Custom ${dimension.display_name}`,\n        value: dimension.name,\n        field: dimension.name\n      }));\n    }\n    return this.cache.customDimensions;\n  }\n\n  async getSavedFilters() {\n    if (this.cache.savedFilters === undefined) {\n      const savedFilters = await this.kentikAPI.getSavedFilters();\n      this.cache.savedFilters = _.map(savedFilters, filter => ({\n        text: `Saved ${filter.filter_name}`,\n        field: filter.filter_name,\n        id: filter.id\n      }));\n    }\n    return this.cache.savedFilters;\n  }\n\n  private _getDimensionPopulatorsValues(dimension: any) {\n    return dimension.populators.reduce((values, populator) => {\n      values.push(populator.value);\n      return values;\n    }, []);\n  }\n}\n\nangular.module('grafana.services').service('kentikProxySrv', KentikProxy);\n","import * as _ from 'lodash';\nimport { unitList, filterFieldList } from './metric_def';\n\nconst KENTIK_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\nfunction formatMetricAggs(unitDef: any) {\n  const aggs = [\n    {\n      name: 'avg_both',\n      column: unitDef.field,\n      fn: 'average',\n      raw: true, // Set to get timeseries data\n      sample_rate: 1,\n    },\n    {\n      name: 'p95th_both',\n      column: unitDef.field,\n      fn: 'percentile',\n      rank: 95,\n      sample_rate: 1,\n    },\n    {\n      name: 'max_both',\n      column: unitDef.field,\n      fn: 'max',\n      sample_rate: 1,\n    },\n  ];\n\n  return aggs;\n}\n\nfunction formatUniqueIpAggs(unitDef: any) {\n  const aggs = [\n    {\n      name: 'avg_ips',\n      column: unitDef.field,\n      fn: 'average',\n      raw: true,\n      sample_rate: 1,\n    },\n    {\n      name: 'p95th_ips',\n      column: unitDef.field,\n      fn: 'percentile',\n      rank: 95,\n      sample_rate: 1,\n    },\n    {\n      name: 'max_ips',\n      column: unitDef.field,\n      fn: 'max',\n      sample_rate: 1,\n      raw: true,\n    },\n    {\n      name: 'p95th_bits_per_sec',\n      column: 'f_sum_both_bytes',\n      fn: 'percentile',\n      rank: 95,\n      sample_rate: 1,\n    },\n    {\n      name: 'p95th_pkts_per_sec',\n      column: 'f_sum_both_pkts',\n      fn: 'percentile',\n      rank: 95,\n      sample_rate: 1,\n    },\n  ];\n\n  return aggs;\n}\n\nfunction formatAggs(unitDef: any) {\n  let aggs = [];\n  if (unitDef.value === 'unique_src_ip' || unitDef.value === 'unique_dst_ip') {\n    aggs = formatUniqueIpAggs(unitDef);\n  } else {\n    aggs = formatMetricAggs(unitDef);\n  }\n\n  return aggs;\n}\n\nfunction formatFilters(kentikFilterGroups: Array<any>) {\n  const filtersObj = {\n    connector: 'All',\n    filterGroups: [],\n  };\n\n  if (kentikFilterGroups.length) {\n    filtersObj.filterGroups = kentikFilterGroups;\n  }\n\n  return filtersObj;\n}\n\nfunction buildTopXdataQuery(options) {\n  const unitDef = _.find(unitList, { value: options.unit });\n  const startingTime = options.range.from.utc().format(KENTIK_TIME_FORMAT);\n  const endingTime = options.range.to.utc().format(KENTIK_TIME_FORMAT);\n\n  const query = {\n    dimension: [options.metric],\n    metric: options.unit,\n    matrixBy: [],\n    cidr: 32,\n    cidr6: 128,\n    topx: '8', // Visualization depth (8 by default)\n    depth: 100,\n    fastData: 'Auto',\n    lookback_seconds: 0,\n    time_format: 'UTC',\n    starting_time: startingTime,\n    ending_time: endingTime,\n    device_name: options.deviceNames,\n    outsort: unitDef.outsort,\n    aggregates: formatAggs(unitDef),\n    filters_obj: formatFilters(options.kentikFilterGroups),\n    saved_filters: options.kentikSavedFilters,\n  };\n\n  return query;\n}\n\nfunction convertToKentikFilter(filterObj: any, filterDef: any) {\n  // Use Kentik 'not equal' style\n  if (filterObj.operator === '!=') {\n    filterObj.operator = '<>';\n  }\n\n  return {\n    filterField: filterDef.field,\n    operator: filterObj.operator,\n    filterValue: filterObj.value,\n  };\n}\n\nfunction convertToKentikSavedFilter(filterObj: any, filterDef: any) {\n  return {\n    filter_id: filterDef.id,\n    is_not: filterObj.value === 'exclude'\n  };\n}\n\nfunction convertToKentikFilterGroup(filters: Array<any>, customDimensions: Array<any>, savedFiltersList: Array<any>) {\n  let kentikFilters = [];\n  let savedFilters = [];\n\n  if (filters.length) {\n    const filterFieldListExtended = _.concat(filterFieldList, customDimensions);\n    for (let filter of filters) {\n      const filterFieldDef = _.find(filterFieldListExtended, { text: filter.key });\n      if (filterFieldDef === undefined) {\n        const savedFilterDef = _.find(savedFiltersList, { text: filter.key });\n        savedFilters.push(convertToKentikSavedFilter(filter, savedFilterDef));\n      } else {\n        kentikFilters.push(convertToKentikFilter(filter, filterFieldDef));\n      }\n    }\n\n\n    if (kentikFilters.length > 0) {\n      let connector = 'All';\n      if (\n        filters[0].condition &&\n        (filters[0].condition.toLowerCase() === 'or' || filters[0].condition.toLowerCase() === 'any')\n      ) {\n        connector = 'Any';\n      }\n\n      kentikFilters = [{\n        connector,\n        filters: kentikFilters,\n        not: false,\n      }];\n    }\n  }\n\n  return {\n    kentikFilters,\n    savedFilters,\n  };\n}\n\nexport default {\n  buildTopXdataQuery,\n  formatAggs,\n  convertToKentikFilterGroup,\n};\n","import { metricList, unitList, filterFieldList } from './metric_def';\nimport * as _ from 'lodash';\nimport './kentikProxy';\nimport TableModel from 'grafana/app/core/table_model';\nimport queryBuilder from './query_builder';\n\nclass KentikDatasource {\n  name: string;\n  kentik: any;\n\n  /** @ngInject */\n  constructor(public instanceSettings: any, public templateSrv: any, kentikProxySrv: any) {\n    this.name = instanceSettings.name;\n    this.kentik = kentikProxySrv;\n  }\n\n  interpolateDeviceField(value: any, variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return value.join(',');\n  }\n\n  async query(options: any) {\n    if (!options.targets || options.targets.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const target = options.targets[0];\n    const deviceNames = this.templateSrv.replace(\n      target.device,\n      options.scopedVars,\n      this.interpolateDeviceField.bind(this)\n    );\n\n    let kentikFilters = this.templateSrv.getAdhocFilters(this.name);\n    const customDimensions = await this.kentik.getCustomDimensions();\n    const savedFiltersList = await this.kentik.getSavedFilters();\n    const kentikFilterGroups = queryBuilder.convertToKentikFilterGroup(kentikFilters, customDimensions, savedFiltersList);\n\n    const queryOptions = {\n      deviceNames: deviceNames,\n      range: {\n        from: options.range.from,\n        to: options.range.to,\n      },\n      metric: this.templateSrv.replace(target.metric),\n      unit: this.templateSrv.replace(target.unit),\n      kentikFilterGroups: kentikFilterGroups.kentikFilters,\n      kentikSavedFilters: kentikFilterGroups.savedFilters,\n    };\n    const query = queryBuilder.buildTopXdataQuery(queryOptions);\n\n    return this.kentik\n      .invokeTopXDataQuery(query)\n      .then(this.processResponse.bind(this, query, target.mode, options))\n      .then(result => {\n        return {\n          data: result,\n        };\n      });\n  }\n\n  async processResponse(query: any, mode: string, options: any, data: any) {\n    if (!data.results) {\n      return Promise.reject({ message: 'no kentik data' });\n    }\n\n    const bucketData = data.results[0].data;\n    if (bucketData.length === 0) {\n      return [];\n    }\n\n    const extendedMetricList = await this._getExtendedDimensionsList(metricList);\n    const metricDef = _.find(\n      extendedMetricList,\n      { value: query.dimension[0] }\n    );\n\n    const unitDef = _.find(unitList, { value: query.metric });\n\n    if (mode === 'table') {\n      return this.processTableData(bucketData, metricDef, unitDef);\n    } else {\n      return this.processTimeSeries(bucketData, query, options);\n    }\n  }\n\n  processTimeSeries(bucketData: any, query: any, options?: any) {\n    const seriesList = [];\n    let endIndex = query.topx;\n    if (bucketData.length < endIndex) {\n      endIndex = bucketData.length;\n    }\n\n    for (let i = 0; i < endIndex; i++) {\n      const series = bucketData[i];\n      const timeseries = _.find(series.timeSeries, series => {\n        return series.flow && series.flow.length;\n      });\n      const seriesName = series.key;\n\n      if (timeseries) {\n        const grafanaSeries = {\n          target: seriesName,\n          datapoints: _.map(timeseries.flow, point => {\n            return [point[1], point[0]];\n          }),\n        };\n        seriesList.push(grafanaSeries);\n      }\n    }\n\n    return seriesList;\n  }\n\n  processTableData(bucketData: any, metricDef: any, unitDef: any) {\n    const table = new TableModel();\n\n    table.columns.push({ text: metricDef.text });\n\n    for (const col of unitDef.tableFields) {\n      table.columns.push({ text: col.text, unit: col.unit });\n    }\n\n    _.forEach(bucketData, row => {\n      const seriesName = row.key;\n\n      const values = [seriesName];\n      for (const col of unitDef.tableFields) {\n        let val = row[col.field];\n\n        if (_.isString(val)) {\n          val = parseFloat(val);\n        }\n\n        values.push(val);\n      }\n\n      table.rows.push(values);\n    });\n\n    return [table];\n  }\n\n  async metricFindQuery(query: any) {\n    if (query === 'metrics()') {\n      return this._getExtendedDimensionsList(metricList);\n    }\n    if (query === 'units()') {\n      return unitList;\n    }\n\n    return this.kentik.getDevices().then(devices => {\n      return devices.map(device => {\n        return { text: device.device_name, value: device.device_name };\n      });\n    });\n  }\n\n  async getTagKeys() {\n    let initialList = await this._getExtendedDimensionsList(filterFieldList);\n    const savedFilters = await this.kentik.getSavedFilters();\n    return _.concat(initialList, savedFilters);\n  }\n\n  async getTagValues(options: any) {\n    if (options) {\n      let filter = _.find(filterFieldList, { text: options.key });\n\n      if (filter === undefined) {\n        const savedFilters = await this.kentik.getSavedFilters();\n        filter = _.find(savedFilters, { text: options.key });\n        if (filter === undefined) {\n          const customDimensions = await this.kentik.getCustomDimensions();\n          const dimension = _.find(customDimensions, { text: options.key });\n          return dimension.values.map(value => ({ text: value }));\n        } else {\n          return [{ text: 'include' }, { text: 'exclude' }];\n        }\n      } else {\n        const field = filter.field;\n        return this.kentik.getFieldValues(field).then(result => {\n          return result.rows.map(row => {\n            return { text: row[field].toString() };\n          });\n        });\n      }\n    } else {\n      return [];\n    }\n  }\n\n  private async _getExtendedDimensionsList(list: Array<any>) {\n    const customDimensions = await this.kentik.getCustomDimensions();\n    return _.concat(list, customDimensions);\n  }\n}\n\nexport { KentikDatasource };\n","export class ConfigCtrl {\n  static templateUrl = 'datasource/config.html';\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\n\nclass KentikQueryCtrl extends QueryCtrl {\n  static templateUrl: string;\n  queryModes: any[];\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.mode = this.target.mode || 'graph';\n\n    this.queryModes = [{ value: 'graph', text: 'Graph' }, { value: 'table', text: 'Table' }];\n  }\n}\n\nKentikQueryCtrl.templateUrl = 'datasource/query_editor.html';\n\nexport { KentikQueryCtrl };\n","import {KentikDatasource} from './datasource';\nimport {ConfigCtrl} from './config';\nimport {KentikQueryCtrl} from './query_editor';\n\nexport {\n  KentikDatasource as Datasource,\n  ConfigCtrl as ConfigCtrl,\n  KentikQueryCtrl as QueryCtrl\n};\n"],"sourceRoot":""}